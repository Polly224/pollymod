Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Rng Manipulation,Get a jackpot[;] without|rolling any extra dice,1,self.roll_range += self.roll_target; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,simplify,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Rebet Blade,Do [sword]<d6> damage[;]|on jackpot[;] do [sword]3 extra,1,var bonusdam = 0; if(self.roll_jackpot > 0){ bonusdam = 3; }  attack(d + bonusdam); sfxdamage(d + bonusdam);,,MAX5,,RED,simplify,complicate,,,0,NO,NO,robotonly,,,,,,,,,,,,
Errorsurance,Gain [shield]5 shield when you|trigger an error,1,inflictself(~shield~[;]5); sfx(~_shield~); e.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|robotonly|cannotsteal|triggeronerror|excludefromrandomlists|nojackpotcopy|curseavoid,,,,e.setvar(~rollcheck~[;] 0);,e.setvar(~doshield~[;]1);,if(self.roll_error && e.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Parallel Dicemension,Dice value -1[;] on error[;]|roll a 10,1,if(self.roll_error){ givedice([10]); } else{ givedice([d - 1]); },,NORMAL,,GRAY,increaserange,complicate,,,0,YES,NO,errorimmune|excludefromrandomlists|unused,,,,,,,,,,,,
Errorsurance_upgraded,Gain [shield]5 shield |and gain [thorns]2 thorns|when you trigger an error,1,inflictself(~shield~[;]5); sfx(~_shield~); inflictself(~thorns~[;] 2); self.setvar(~doshield~[;]0);,,,,,,,,,0,YES,NO,errorimmune|cannotsteal|robotonly|excludefromrandomlists|triggeronerror|nojackpotcopy|curseavoid,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Jacked Switch,Do [sword]<d6> damage[;] on| error[;] gain [shield][slot] instead,1,if(self.roll_error){ inflictself(~shield~[;]d); sfx(~_shield~); } else{ attack(d); sfxdamage(d); },,NORMAL,,GRAY,change_power,complicate,,,0,NO,NO,errorimmune|robotonly,,,,e.fulldescription = ~Do [sword]<d6> damage[;] on[newline]error[;] gain [shield][slot] instead~;,,if(self.roll_error){ e.fulldescription = ~Do [sword][slot] damage[;] on[newline]error[;] gain [shield]<d6> instead~; },,,if(self.roll_realtotal > self.roll_target){ e.castdirection = -1; } else{ e.castdirection = 1; },,,
Inhibited Blade,Do [sword]<double> damage|(Only available on jackpot),1,attack(d * 2); sfxdamage(d * 2);,,ODD,,YELLOW,simplify,change_power,,,0,NO,NO,robotonly,,,,if(!self.hasstatus(~manualroll~)){ e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade~; e.unavailabledetails = [~Unavailable (Needs jackpot)~]; },,if(self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
Reroll,Reroll jackpot options[;]|return dice,1,runscript(~jackpotofalltrades/resetjackpot~[;] [false[;] true]); sfx(~_leverpull~); givedice([d]);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Errorsurance_weakened,Gain [shield]2 shield when you|trigger an error,1,inflictself(~shield~[;]2); sfx(~_shield~); self.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|triggeronerror|cannotsteal|excludefromrandomlists|robotonly|nojackpotcopy|curseavoid,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Empty Slot,Transform this into the first |jackpot skill when used,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~PURPLE~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName) > -1){ eq.castdirection = -1; } } }    sfx(~_thinghappens~);,,EVEN,,PURPLE,change_power,doublerequirements,,,0,YES,YES,cannotsteal|robotonly|cannotreuse,,,,,,,,,,,,
Placeholder,If you're reading this[;] I|fucked up the code somehow.,1,,,COUNTDOWN,5,,,noeffect,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotonly,,,self.equipment.remove(e); /*this really shouldn't stick around in your inventory! if it does[;] lmk!*/,,,,,,,,,
Empty Slot_upgraded,Transform into first jackpot |skill[;] return dice,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~PURPLE~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName) > -1){ eq.castdirection = -1; } } }    sfx(~_thinghappens~); givedice(d);,,EVEN,,PURPLE,,,,,0,YES,YES,cannotsteal|robotonly|cannotreuse,,,,,,,,,,,,
Rng Manipulation_weakened,Increase jackpot range by 2,1,self.roll_range += 2; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Double Down,Recover [heal]3 health when|you trigger a jackpot,1,attackself(-3); sfx(~_heal~);,,,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists|cannotsteal|curseavoid,,,,,e.setvar(~doattack~[;]1); e.setvar(~triggered~[;] false); if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },,,,,,
_weakened,,1,,,,,,,,,,0,NO,NO,,,,,,,,,,,,,
_downgraded,,1,,,,,,,,,,0,NO,NO,,,,,,,,,,,,,
Retuner,On jackpot[;] replace this |with a random upgraded|equipment,1,,,,,PINK,change_power,change_power,,,0,NO,NO,cannotsteal|robotonly|unused,,,,,,if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~+'); trace(self.equipment);~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); e.animate(~error~); e.ready = false; },,,,,,
Retuner_weakened,On jackpot[;] replace this |with a random equipment[;]|and weaken it,1,,,,,PINK,change_power,,,,0,NO,NO,cannotsteal|robotonly|unused,,,,,e.setvar(~doeffect~[;]1);,if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~');~; t.script = ~self.equipment[self.equipment.length - 2].downgrade();~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Inhibited Blade_weakened,Do [sword]<d6> damage|(Only available on jackpot),1,attack(d); sfxdamage(d);,,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly,,,,if(!self.hasstatus(~manualroll~)){ e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade~; e.unavailabledetails = [~Unavailable (Needs jackpot)~]; },,if(self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } }   e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,,,,,
Pop Off,Gain [jackpotshard]1 jackpot shard every|time you use a jackpot skill|[75%][grey](Autorolls ASAP on 4),1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,cannotsteal|robotonly|popoff,,var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); var s = new elements.DiceyScript(~if (self.roll_jackpot > 0 && self.getskillcard().skills.length >= 3) {     for (i in 0...self.getskillcard().skills.length)     {         var s = self.getskillcard().skills[i];         if (s.script.indexOf('popoffinjected') == -1){      s.script += \~ /*popoffinjected*/ var amt = 0;for(eq in self.equipment){if(eq.hastag(\\\~popoff\\\~)){amt++;}}for(k in 0...amt){inflictself(\\\~jackpotshard\\\~[;] 1); sfx(\\\~_leverpull\\\~);}\~; } } }~); e.setvar(~s~[;] s); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); act.move();,,,e.setvar(~doaction~[;] true);,,,,,,,
Pop Off_weakened,Gain [jackpotshard]1 jackpot shard when|you trigger a jackpot|[75%][grey](Autorolls ASAP on 4),1,,,,,YELLOW,,,,,0,NO,NO,robotonly|cannotsteal,,,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
Pop Off_upgraded,Gain [jackpotshard]1 jackpot shard every|time you use a jackpot skill|or trigger a jackpot|[75%][grey](Autorolls ASAP on 4),1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|cannotsteal|popoff,,var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); var s = new elements.DiceyScript(~if (self.roll_jackpot > 0 && self.getskillcard().skills.length >= 3) {     for (i in 0...self.getskillcard().skills.length)     {         var s = self.getskillcard().skills[i];         if (s.script.indexOf('popoffinjected') == -1){                s.script += \~ /*popoffinjected*/ var amt = 0;for(eq in self.equipment){if(eq.hastag(\\\~popoff\\\~)){amt++;}}for(k in 0...amt){inflictself(\\\~jackpotshard\\\~[;] 1); sfx(\\\~_leverpull\\\~);}\~;       } } }~); e.setvar(~s~[;] s); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); act.move();,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
Errorsurance_downgraded,Gain [shield]2 shield when you|trigger an error,1,inflictself(~shield~[;]2); sfx(~_shield~); self.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|triggeronerror|cannotsteal|excludefromrandomlists|robotonly|nojackpotcopy|curseavoid,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Trickle Charge,[90%]Gain [jackpotshard]1 jackpot shard|[75%][grey](Autorolls ASAP on 4)|(Reusable),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,ODD,,ORANGE,simplify,change_power,,,-1,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Bugfixing,Fix equipment errors|(Only available on error),1,for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ var posx = eq.x; var posy = eq.y; eq.resetfornewturn(); eq.x = posx; eq.y = posy; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~); } } sfx(~jackpot_rolldice~);,,COUNTDOWN,5,,change_power,change_power,,,0,YES,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; } },,,,,,
Bugfixing_weakened,Fix 1st equipment's error|(Only available on error),1,var equips = []; for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ equips.push(eq); } } sfx(~jackpot_rolldice~); var eq = equips[0]; var posx = eq.x; var posy = eq.y; eq.resetfornewturn(); eq.x = posx; eq.y = posy; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~);,,COUNTDOWN,5,,twothirdcountdown,change_power,,,0,YES,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_total == self.roll_target && self.roll_jackpot < 1){ if(!e.availablethisturn){ e.availablethisturn = true; } } e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Bugfixing_downgraded,Fix 1st equipment's error|(Only available on error),1,var equips = []; for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ equips.push(eq); } } sfx(~jackpot_rolldice~); var eq = equips[0]; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~);,,COUNTDOWN,5,,twothirdcountdown,change_power,,,0,YES,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_total == self.roll_target && self.roll_jackpot < 1){ if(!e.availablethisturn){ e.availablethisturn = true; } } e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Hive Network,Jackpot range increased by|2[;] disables for next turn|on error,1,,,,,PINK,change_power,,,,0,NO,NO,errorimmune|robotonly|weakenavoid,,e.setvar(~active~[;] true);,,if(e.getvar(~active~)){ self.roll_range += 2; } else{ e.availablethisturn = false; e.unavailabletext = ~Hive Network~; e.unavailabledetails = [~Disabled (Triggered error)~]; },e.setvar(~active~[;] true);,if(self.roll_error){ e.setvar(~active~[;] false); e.availablethisturn = false; e.unavailabletext = ~Hive Network~; e.unavailabledetails = [~Unavailable (Triggered error)~]; },,,,,,
Bugfixing_upgraded,Fix equipment errors|(Only available on error),1,for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ var posx = eq.x; var posy = eq.y; eq.resetfornewturn(); eq.x = posx; eq.y = posy; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~); } } sfx(~jackpot_rolldice~);,,COUNTDOWN,3,,change_power,change_power,,,0,YES,NO,errorimmune|weakenavoid|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing+~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; } },,,,,,
Patched Blade_upgraded,Do [sword]<triple> damage|(Only available on error),1,attack(d * 3); sfxdamage(d * 3);,,NORMAL,,,,,,,0,NO,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Patched Blade+~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
Patched Blade_weakened,Do [sword]<d6> damage|(Only available on error),1,attack(d); sfxdamage(d);,,NORMAL,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Patched Blade-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } } e.unavailabletext = ~Patched Blade-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Pop Off_downgraded,Gain [jackpotshard]1 jackpot shard when|you trigger a jackpot|[75%][grey](Autorolls ASAP on 4),1,,,,,YELLOW,,,,,0,NO,NO,robotonly|cannotsteal,,,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
BSOD,When you trigger an error[;]|you can still use jackpot skills|[85%][grey](Will always be 3 skills),1,,,,,,,,,,0,NO,NO,excludefromrandomlists|robotonly|cannotsteal|errorimmune|jesterequipment:bigbertha|nojackpotcopy|permabuff,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,,,,,,,,,
Big Bertha,Every jackpot skill has a 33%|chance to be [yellow]upgraded|[85%][grey](Marked in [yellow]yellow[]),1,,,,,YELLOW,,,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotonly|nojackpotcopy|jesterequipment:bigbertha|permabuff,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,,,,,,,,,
Retuner_downgraded,On jackpot[;] replace this |with a random equipment[;]|and weaken it,1,,,,,PINK,change_power,,,,0,NO,NO,cannotsteal|robotonly|unused,,,,,e.setvar(~doeffect~[;]1);,if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~');~; t.script = ~self.equipment[self.equipment.length - 2].downgrade();~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Bonus Slot,Get an extra jackpot skill to|choose from whenever|you hit a jackpot,1,,,,,PINK,change_power,,,,0,NO,NO,extrajackpotskill|weakenimmune|nojackpotcopy|robotonly|excludefromrandomlists,,inflictself(~extrajackpotskill~[;] 1);,,,,,,,,,,
Bonus Slot_upgraded,Get 2 extra jackpot skills to|choose from whenever|you hit a jackpot,1,,,,,PINK,change_power,,,,0,NO,NO,extrajackpotskill|weakenimmune|nojackpotcopy|robotonly|excludefromrandomlists,,inflictself(~extrajackpotskill~[;] 2);,,,,,,,,,,
Salt In The Wound,Do [sword]<d6> damage[;] on jackpot[;]|also inflict [poison]<d6> poison|[grey](Reusable),1,if(self.roll_jackpot){ inflict(~poison~[;]d); sfx(~_poison~); } attack(d); sfxdamage(d);,,MAX2,,PURPLE,increaserange,change_power,,,-1,NO,NO,robotonly,,,,,,,,,,,,
Slimy Payload,Inflict [virus]3 virus,1,inflict(~virus~[;] 3); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly|unused,,,,,,,,,,,,
Slimy Payload_upgraded,Inflict [virus]4 virus,1,inflict(~virus~[;] 4); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly|unused,,,,,,,,,,,,
Slimy Payload_weakened,Inflict [virus]2 virus,1,inflict(~virus~[;] 2); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly|unused,,,,,,,,,,,,
Safety Knife,Split a dice in two[;] on error[;]|instead stash dice for a turn,1,if(self.roll_error){ inflictself(~stash~+d); inflictself(~illuminate~); } else{ givedice(split(d)[;] ~splitdice~); },,MAX5,,,change_power,decreaserange,,,0,YES,NO,robotonly|errorimmune,,,,,,,,,,,,
Capitalize,Do [sword]<d6>[;] [sword]<double> instead|if enemy hit jackpot,1,var mult = 1; if(target.roll_jackpot){ mult = 2; }  attack(d * mult); sfxdamage(d * mult);,,MAX5,,YELLOW,change_power,decreaserange,,,0,NO,NO,excludefromrandomlists|cannotsteal|robotenemyonly|unused,,,,,,,,,,,,
Capitalize_upgraded,Do [sword]<d6>[;] [sword]<triple> instead|if enemy hit jackpot,1,var mult = 1; if(target.roll_jackpot){ mult = 3; }  attack(d * mult); sfxdamage(d * mult);,,MAX5,,YELLOW,change_power,,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Exploit,Gain [shield]<d6>[;] [shield]<double> instead |if enemy triggered error,1,var mult = 1; if(target.roll_error){ mult = 2; } inflictself(~shield~[;] d * mult); sfx(~_shield~);,,MAX5,,,change_power,decreaserange,,,0,YES,NO,cannotsteal|excludefromrandomlists|robotenemyonly|unused,,,,if(target.roll_error){ e.script += ~bonus(10000);~; },,,,e.script = ~var mult = 1; if(target.roll_error){ mult = 2; } inflictself(\~shield\~[;] d * mult); sfx(\~_shield\~); ~,,,,
Exploit_upgraded,Gain [shield]<d6>[;] [shield]<triple> instead |if enemy triggered error,1,var mult = 1; if(target.roll_error){ mult = 3; } inflictself(~shield~[;] d * mult); sfx(~_shield~);,,MAX5,,,change_power,decreaserange,,,0,YES,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,if(target.roll_error){ e.script += ~bonus(10000);~; },,,,e.script = ~var mult = 1; if(target.roll_error){ mult = 3; } inflictself(\~shield\~[;] d * mult); sfx(\~_shield\~); ~,,,,
Copied Skill,This will turn into your 1st|jackpot skill at the start of|Copycat's turn,2,,,COUNTDOWN,4,BLACK,,,,,0,NO,NO,unused|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Slimy Payload_downgraded,Inflict [virus]2 virus,1,inflict(~virus~[;] 2); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly|unused,,,,,,,,,,,,
Egg Basket,Combine dice into 1[;] can|return dice higher than 6,1,givedice([d]);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Egg Basket_upgraded,Combine dice into 1[;] can|return dice higher than 6|(2 uses left this turn),1,givedice([d]);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Egg Basket_weakened,Combine dice,1,givedice(d);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Egg Basket_downgraded,Combine dice,1,givedice(d);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Safety Knife_upgraded,Split dice in three[;] on error[;]|instead stash dice for a turn,1,if(self.roll_error){ inflictself(~stash~+d); inflictself(~illuminate~); } else{ givedice(split(d[;] 3)[;] ~splitdice~); },,MAX5,,,change_power,decreaserange,,,0,YES,NO,robotonly|errorimmune,,,,,,,,,,,,
Hive Network_upgraded,[90%]Jackpot range increased by 2,1,,,,,PINK,change_power,,,,0,NO,NO,errorimmune|robotonly|weakenavoid,,,,self.roll_range += 2;,,,,,,,,
Reroll_upgraded,Reroll jackpot options and|upgrade them[;] return dice,1,runscript(~jackpotofalltrades/resetjackpot~[;] [true[;] true]); sfx(~_leverpull~); givedice([d]);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Insider Info,The next dice you|calculate will be a ???|[75%][grey](Updates during battle),1,,,,,PINK,,,,,0,NO,NO,cannotsteal|excludefromrandomlists|shockavoid|weakenavoid|altpoisonavoid|robotonly|errorimmune|nojackpotcopy,,e.setvar(~calculatepressed~[;] 0); var pickednum = rand([1[;]2[;]3[;]4[;]5[;]6]); Rules.playerdicerange([pickednum]); e.fulldescription = ~The next dice you[newline]calculate will be a ~ + pickednum; e.setvar(~diceval~[;] pickednum); if(getstatusself(ICE) > 0){ e.fulldescription = ~The next dice you[newline]calculate will be a [ice][blue]1~; },Rules.playerdicerange([1[;]2[;]3[;]4[;]5[;]6]); e.fulldescription = ~The next dice you[newline]calculate will be a ???[newline][75%][grey](Updates during battle)~;,e.fulldescription = ~The next dice you[newline]calculate will be a ~ + e.getvar(~diceval~); e.setvar(~cpu~[;] self.roll_realtotal); for(x in self.status){ if(x.type == ~ice~ && x.value >= e.getvar(~calculatepressed~)){ e.fulldescription = ~The next dice you[newline]calculate will be a [ice]1~; } if(x.type == ~ice_all~){ e.fulldescription = ~The next dice you[newline]calculate will be a [ice]1~; } if(x.name == ~Blind~ && x.value >= e.getvar(~calculatepressed~)){ e.fulldescription = ~The next dice you[newline]calculate will be a [blind]???~; } },,if(e.getvar(~cpu~) < self.roll_realtotal){ e.setvar(~calculatepressed~[;] e.getvar(~calculatepressed~) + 1); e.setvar(~cpu~[;] self.roll_realtotal); var pickednum = rand([1[;]2[;]3[;]4[;]5[;]6]); e.setvar(~diceval~[;] pickednum); Rules.playerdicerange([pickednum]); } if((self.roll_total + e.getvar(~diceval~)) >= (self.roll_target - self.roll_range) && !self.roll_jackpot && !self.roll_error){ if((self.roll_total + e.getvar(~diceval~)) > self.roll_target){ e.fulldescription = ~The next dice you[newline]calculate will be a [red]~ + e.getvar(~diceval~); } else{ e.fulldescription = ~The next dice you[newline]calculate will be a [yellow]~ + e.getvar(~diceval~); } } else{ e.fulldescription = ~The next dice you[newline]calculate will be a ~ + e.getvar(~diceval~); } for(x in self.status){ if(x.name == ~Blind~ && x.value >= e.getvar(~calculatepressed~)){ e.fulldescription = ~The next dice you[newline]calculate will be a [blind]???~; }  if(x.type == ~ice~ && x.value >= e.getvar(~calculatepressed~)) { e.fulldescription = ~The next dice you[newline]calculate will be a [ice]1~; }  if(x.type == ~ice_all~) { e.fulldescription = ~The next dice you[newline]calculate will be a [ice]1~; } },,e.setvar(~calculatepressed~[;] 0);,,,,
Salt In The Wound_weakened,Do [sword]<d6> damage[;] on jackpot[;]|also inflict [poison]<d6> poison,1,if(self.roll_jackpot){ inflict(~poison~[;]d); sfx(~_poison~); } attack(d); sfxdamage(d);,,MAX2,,PURPLE,add1,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,
Salt In The Wound_downgraded,Do [sword]<d6> damage[;] on jackpot[;]|also inflict [poison]<d6> poison,1,if(self.roll_jackpot){ inflict(~poison~[;]d); sfx(~_poison~); } attack(d); sfxdamage(d);,,MAX2,,PURPLE,add1,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,
Sunken Costs,Do [sword]15 damage[;] this halves |its countdown on jackpot,1,attack(15); sfxdamage(15);,,COUNTDOWN,30,RED,change_power,change_power,,,0,NO,NO,robotonly,,,,,e.setvar(~halve~[;] true);,if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~halve~) && e.remainingcountdown > 1){ e.setvar(~halve~[;] false); e.remainingcountdown -= (e.remainingcountdown / 2); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Countdown halved! [dice]~[;] 0xFFFFFF); },,,,,,
Double Down_upgraded,Recover [heal]3 health and|gain [reduce]1 reduce when you|trigger a jackpot,1,attackself(-3); sfx(~_heal~); inflictself(~reduce~[;] 1); sfx(~_shield~);,,,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists|cannotsteal|curseavoid,,,,,e.setvar(~doattack~[;]1); e.setvar(~triggered~[;] false); if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },,,,,,
Double Down_weakened,Recover [heal]1 health when|you trigger a jackpot,1,attackself(-1); sfx(~_heal~);,,,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists|cannotsteal|curseavoid,,,,,e.setvar(~doattack~[;]1); e.setvar(~triggered~[;] false); if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.ready = false; },,,,,,
Double Down_downgraded,Recover [heal]1 health when|you trigger a jackpot,1,attackself(-1); sfx(~_heal~);,,,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists|cannotsteal|curseavoid,,,,,e.setvar(~doattack~[;]1); e.setvar(~triggered~[;] false); if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.ready = false; },,,,,,
Retuner_upgraded,On jackpot[;] replace this |with a random upgraded|equipment[;] and trigger it,1,,,,,PINK,change_power,change_power,,,0,NO,NO,cannotsteal|robotonly|unused,,,,,,if((self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)) && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~+');~; t.script = ~self.equipment[self.equipment.length - 2].doequipmentaction(self[;] target[;] self.equipment[self.equipment.length - 2].castdirection[;] [6][;] 2[;] false[;] false[;] false);~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Bumpdacious,Dice value +1[;] can return |dice higher than 6,1,givedice([d + 1]);,,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bumpdacious_upgraded,Dice value +1[;] can return |dice higher than 6|(2 uses left this turn),1,givedice([d + 1]);,,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Bumpdacious_weakened,Dice value +1,1,givedice(d + 1);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inhibited Blade_downgraded,Do [sword]<d6> damage|(Only available on jackpot),1,attack(d); sfxdamage(d);,,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly,,,,if(!self.hasstatus(~manualroll~)){ e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade~; e.unavailabledetails = [~Unavailable (Needs jackpot)~]; },,if(self.roll_jackpot > 0 # self.getstatus(~jackpotshard~) >= 4 # self.hasstatus(~manualroll~)){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } }   e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,,,,,
Sunken Costs_upgraded,Halve enemy hp[;] this halves|its countdown on jackpot,1,pierceattack((target.hp / 2)); sfxdamage((target.hp / 2));,,COUNTDOWN,50,RED,change_power,,,,0,NO,NO,robotonly,,,,,e.setvar(~halve~[;] true);,if(self.roll_jackpot && e.getvar(~halve~) && e.remainingcountdown > 1){ e.setvar(~halve~[;] false); e.remainingcountdown -= (e.remainingcountdown / 2); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Countdown halved! [dice]~[;] 0xFFFFFF); },,,,,,
Sunken Costs_weakened,Do [sword]8 damage[;] this halves |its countdown on jackpot,1,attack(8); sfxdamage(8);,,COUNTDOWN,25,RED,change_power,,,,0,NO,NO,robotonly,,,,,e.setvar(~halve~[;] true);,if(self.roll_jackpot && e.getvar(~halve~) && e.remainingcountdown > 1){ e.setvar(~halve~[;] false); e.remainingcountdown -= (e.remainingcountdown / 2); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Countdown halved! [dice]~[;] 0xFFFFFF); },,,,,,
Jacked Switch_upgraded,Do [sword]<d6> damage[;] on| error[;] gain [shield][slot] + 1 instead,1,if(self.roll_error){ inflictself(~shield~[;]d); sfx(~_shield~); } else{ attack(d); sfxdamage(d); },,NORMAL|FREE1,,GRAY,change_power,complicate,,,0,NO,NO,errorimmune|robotonly,,,,e.fulldescription = ~Do [sword]<d6> damage[;] on[newline]error[;] gain [shield][slot] + 1 instead~;,,if(self.roll_error){ e.fulldescription = ~Do [sword][slot] + 1 damage[;] on[newline]error[;] gain [shield]<d6> instead~; },,,if(self.roll_realtotal > self.roll_target){ e.castdirection = -1; } else{ e.castdirection = 1; },,,
Wraparound,Dice value -1[;] returns a six|instead if dice is a one,1,if(d > 1){ givedice(d - 1); } else{ givedice(6); },,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Wraparound_upgraded,Dice value -1[;] returns a six|instead if dice is a one|[gray](2 uses left this turn),1,if(d > 1){ givedice(d - 1); } else{ givedice(6); },,NORMAL,,GREEN,change_power,,,,2,YES,NO,,,,,,,,,,,,,
Sunken Costs_downgraded,Do [sword]8 damage[;] this halves |its countdown on jackpot,1,attack(8); sfxdamage(8);,,COUNTDOWN,25,RED,change_power,,,,0,NO,NO,robotonly,,,,,e.setvar(~halve~[;] true);,if(self.roll_jackpot && e.getvar(~halve~) && e.remainingcountdown > 1){ e.setvar(~halve~[;] false); e.remainingcountdown -= (e.remainingcountdown / 2); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Countdown halved! [dice]~[;] 0xFFFFFF); },,,,,,
Trickle Charge_weakened,[90%]Gain [jackpotshard]1 jackpot shard|[75%][grey](Autorolls ASAP on 4),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,ODD,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Trickle Charge_downgraded,[90%]Gain [jackpotshard]1 jackpot shard|[75%][grey](Autorolls ASAP on 4),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,ODD,,ORANGE,simplify,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Bumpdacious_downgraded,Dice value +1,1,givedice(d + 1);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rng Manipulation_downgraded,Increase jackpot range by 2,1,self.roll_range += 2; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Market Gap,Recover [heal]2 health for each|CPU point unused by enemy,2,if(target.roll_realtotal < target.roll_target){ attackself(-(target.roll_target - target.roll_total)); sfx(~_heal~); bonus(100); },,COUNTDOWN,1,GREEN,,,,,0,YES,NO,cannotsteal|excludefromrandomlists|unused|robotenemyonly,,,,,,,,,,,,
Exchange Rates,Gain [jackpotshard]<d6>-3 jackpot shards,1,var manrolls = 0; var shardamt = d - 3; while(shardamt > 3){ shardamt -= 4; manrolls++; } inflictself(~manualroll~[;] manrolls); if(shardamt > 0){ inflictself(~jackpotshard~[;] shardamt); sfx(~_leverpull~); },,MIN4,,ORANGE,change_power,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Exchange Rates_upgraded,Gain [jackpotshard]<d6>-2 jackpot shards,1,var manrolls = 0; var shardamt = d - 2; while(shardamt > 3){ shardamt -= 4; manrolls++; } inflictself(~manualroll~[;] manrolls); if(shardamt > 0){ inflictself(~jackpotshard~[;] shardamt); sfx(~_leverpull~); },,MIN3,,ORANGE,change_power,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Exchange Rates_weakened,Gain [jackpotshard]<d6>-4 jackpot shards,1,var manrolls = 0; var shardamt = d - 4; while(shardamt > 3){ shardamt -= 4; manrolls++; } inflictself(~manualroll~[;] manrolls); if(shardamt > 0){ inflictself(~jackpotshard~[;] shardamt); sfx(~_leverpull~); },,MIN5,,ORANGE,change_power,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Exchange Rates_downgraded,Gain [jackpotshard]<d6>-4 jackpot shards,1,var manrolls = 0; var shardamt = d - 4; while(shardamt > 3){ shardamt -= 4; manrolls++; } inflictself(~manualroll~[;] manrolls); if(shardamt > 0){ inflictself(~jackpotshard~[;] shardamt); sfx(~_leverpull~); },,MIN5,,ORANGE,change_power,change_power,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Interest Gain,Gain [jackpotshard]0 jackpot shards at|the start of your turn[;]|increase by 1 when turn ends,1,,,,,ORANGE,change_power,,,,0,YES,NO,robotonly|cannotsteal|nojackpotcopy|shockimmune|weakenimmune|altpoisonimmune,,self.setvar(~shardamount~[;] 0); e.fulldescription = ~Gain [jackpotshard]<var:shardamount> jackpot shards at[newline]the start of your turn[;][newline][jackpotshard]+1 at the end of your turn~;,self.setvar(~shardamount~[;] 0); e.fulldescription = ~Gain [jackpotshard]0 jackpot shards at[newline]the start of your turn[;][newline][jackpotshard]+1 at the end of your turn~;,var s = new elements.Skill(~Against All Odds_old~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onComplete(s.execute[;] [self[;] target]); s.script = ~inflictself(\~jackpotshard\~[;] self.getvar(\~shardamount\~)); sfx(\~_leverpull\~);~; act.move();,,,,self.setvar(~shardamount~[;] self.getvar(~shardamount~) + 1);,,,,
Swiss Knife,[90%]Bump 1st dice[;] nudge 2nd dice[;]|[90%]flip 3rd dice[;] split 4th dice,2,givedice(actualdice[0].basevalue + 1); givedice(actualdice[1].basevalue - 1); givedice(7 - actualdice[2].basevalue); givedice(split(actualdice[3].basevalue[;] 2));,,NORMAL|MIN2|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,unused,,,,,,,,,,,,
Swiss Knife_upgraded,[80%]Bump 1st dice[;] nudge 2nd dice[;]|[80%]flip 3rd dice[;] split 4th dice into 3,2,givedice(actualdice[0].basevalue + 1); givedice(actualdice[1].basevalue - 1); givedice(7 - actualdice[2].basevalue); givedice(split(actualdice[3].basevalue[;] 3));,,NORMAL|MIN2|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Swiss Knife_weakened,[90%]Bump 1st dice[;] nudge 2nd dice[;]|[90%]flip 3rd dice[;] split 4th dice,2,givedice([actualdice[0].basevalue + 1[;] actualdice[1].basevalue - 1[;] 7 - actualdice[2].basevalue[;] split(actualdice[3].basevalue[;] 2)]);,,MAX3|REQUIRE6|MAX3|MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Swiss Knife_downgraded,[90%]Bump 1st dice[;] nudge 2nd dice[;]|[90%]flip 3rd dice[;] split 4th dice,2,givedice([actualdice[0].basevalue + 1[;] actualdice[1].basevalue - 1[;] 7 - actualdice[2].basevalue[;] split(actualdice[3].basevalue[;] 2)]);,,MAX3|REQUIRE6|MAX3|MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Interest Gain_upgraded,Gain [jackpotshard]1 jackpot shards at|the start of your turn[;]|increase by 1 when turn ends,1,,,,,ORANGE,change_power,,,,0,YES,NO,robotonly|cannotsteal|nojackpotcopy|shockimmune|weakenimmune|altpoisonimmune,,self.setvar(~shardamount~[;] 1); e.fulldescription = ~Gain [jackpotshard]<var:shardamount> jackpot shards at[newline]the start of your turn[;][newline][jackpotshard]+1 at the end of your turn~;,self.setvar(~shardamount~[;] 1); e.fulldescription = ~Gain [jackpotshard]1 jackpot shards at[newline]the start of your turn[;][newline][jackpotshard]+1 at the end of your turn~;,var s = new elements.Skill(~Against All Odds_old~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onComplete(s.execute[;] [self[;] target]); s.script = ~inflictself(\~jackpotshard\~[;] self.getvar(\~shardamount\~)); sfx(\~_leverpull\~);~; act.move();,,,,self.setvar(~shardamount~[;] self.getvar(~shardamount~) + 1);,,,,
Skillcard Fix,This just exists to fix effect|offsets[;] shouldn't show up.,1,,,,,,,,,,0,NO,NO,skillcard|excludefromrandomlists|cannotsteal,,self.equipment.remove(e);,,,,,,,,,,
Hooked Roll,Return a dice that another|equipment needs to [recycle],1,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ if(eq.remainingcountdown > 0 && eq.remainingcountdown < 7){ reusevals.push(eq.remainingcountdown); } else{ if(eq.getvar(~redice~)[0] < 7){ reusevals = reusevals.concat(eq.getvar(~redice~)); } } } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }  if(reusevals.length == 0) reusevals = [1[;]2[;]3[;]4[;]5[;]6]; givedice(rand(reusevals));,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rolling Barrel,Dice value +1[;] [recycle] on 3,1,givedice(d + 1);,,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [3]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rolling Barrel_upgraded,Dice value +1[;] [recycle] on 3,1,givedice(d + 1);,,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [3]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rolling Barrel_downgraded,Dice value +1[;] [recycle] on 3,1,givedice(d + 1);,,REQUIRE3,,GREEN,change_power,change_power,,,0,YES,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [3]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rocking Waves,Reroll dice[;] [recycle] on 1[;]|[recycle] value changes every turn,1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,weakenavoid|recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [rand([1[;]2[;]3[;]4[;]5[;]6])]);,e.fulldescription = ~Reroll dice[;] [recycle] on ~ + e.getvar(~redice~)[0] + ~[;][newline][recycle] value changes every turn~; e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Re-use value changed! [recycle]~[;]~0xffffff~);,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rocking Waves_upgraded,Reroll dice[;] |[recycle] on 2,1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,,NORMAL,,GREEN,change_power,,,,0,YES,NO,weakenavoid|recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [2]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Rocking Waves_downgraded,Reroll dice[;] [recycle] on 1[;]|[recycle] value changes every turn,1,givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,weakenavoid,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [rand([1[;]2[;]3])]);,e.fulldescription = ~Reroll dice[;] [recycle] on ~ + e.getvar(~redice~) + ~[;][newline][recycle] value changes every turn~; e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Re-use value changed! [recycle]~[;]~0xffffff~);,,,,if(d == e.getvar(~redice~) && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Charge 'N Load,Do [fire]6 damage[;]|inflict [fire]1 burn[;]|[recycle] if filled perfectly,2,attack(6[;] FIRE); inflict(FIRE[;] 1); sfxdamage(6); sfx(~_fire~); e.setvar(~redice~[;] []); e.dicehistory = [];,,COUNTDOWN,9,RED,threequartercountdown,change_power,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,if(e.dicehistory.length > 0){ var resultval = e.remainingcountdown - e.reducecountdownby - e.dicehistory[e.dicehistory.length - 1].basevalue; if(resultval > 0){ e.setvar(~redice~[;] [resultval]); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Charge 'N Load_downgraded,Do [fire]6 damage[;]|[recycle] if filled perfectly,2,attack(6[;] FIRE); sfxdamage(6); sfx(~_fire~);,,COUNTDOWN,9,RED,threequartercountdown,change_power,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,if(e.remainingcountdown <= 6){ e.setvar(~redice~[;] [e.remainingcountdown]); } else{ e.setvar(~redice~[;] []); },,,if(e.remainingcountdown - e.reducecountdownby <= 6){ e.setvar(~redice~[;] [e.remainingcountdown - e.reducecountdownby]); },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pocket Hook,Do [sword]<d6> damage[;]|[recycle] on 2,1,attack(d); sfxdamage(d);,,MAX3|FREE1,,RED,change_power,change_power,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [2]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d - 1) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pocket Hook_upgraded,Do [sword]<d6> damage[;]|[recycle] on 1-2,1,attack(d); sfxdamage(d);,,MAX3|FREE1,,RED,,,,,0,NO,NO,recycles,,,,e.setvar(~redice~[;] [1[;]2]);,,,,e.fulldescription = e.getvar(~ogdescription~);,if(e.getvar(~redice~).indexOf(d - 2) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pocket Hook_downgraded,Do [sword]<d6> damage[;]|[recycle] on 1,1,attack(d); sfxdamage(d);,,MAX3,,RED,,,,,0,NO,NO,recycles,,,,e.setvar(~redice~[;] [1]);,,,,e.fulldescription = e.getvar(~ogdescription~);,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pick Leg,Split a dice into two[;]|[recycle] value goes down on [recycle][][;]|[recycle] on 6,1,givedice(split(d)[;] ~splitdice~);,,MIN2,,GREEN,simplify,decreaserange,,,0,YES,NO,recycles,,e.setvar(~rediceval~[;] 6);,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [e.getvar(~rediceval~)]); e.fulldescription = ~Split a dice into two[;][newline][recycle] value goes down on [recycle][][;][newline][recycle] on <evar:rediceval>~;,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); if(e.getvar(~redice~)[0] > 0){ e.setvar(~rediceval~[;] e.getvar(~redice~)[0] - 1); e.setvar(~redice~[;] [e.getvar(~rediceval~)]); } if(!self.hasstatus(~retriggerall~)){ e.fulldescription = ~Split a dice into two[;][newline][recycle] value goes down on [recycle][][;][newline][recycle] on <evar:rediceval>~; } else { e.fulldescription = ~Split a dice into two[;][newline][retrigger] value goes down on [retrigger][][;][newline][retrigger] on <evar:rediceval>~; } },,e.setvar(~fury~[;] true);,
Which Way Captain?,Do [sword]<evendice_d6> and [recycle] on even[;]|gain [shield]<odddice_d6> and [retrigger] on odd,2,if(d%2 == 0){ attack(d); sfxdamage(target[;]d); } else { inflictself(SHIELD[;] d); sfx(~_shield~); },,MAX4,,ORANGE,reducesize,decreaserange,,,0,NO,NO,recycles,,,,e.setvar(~redice~[;] [2[;]4]); e.setvar(~retdice~[;] [1[;]3]);,,,,e.fulldescription = e.getvar(~ogdescription~);,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; }  if(!e.getvar(~fury~)) { if(e.getvar(~retdice~).indexOf(d) != -1){ inflictself(~retriggerpolly~); } else{ if(e.getvar(~redice~).indexOf(d) != -1){ inflictself(~reequippolly~); } } },,e.setvar(~fury~[;] true);,
Reinyarrrnation,[90%]Every turn start[;] this turns|[90%]into a random equipment[;]|[90%]which gets a random [recycle] value,1,var eqlist = getequipmentlist(null[;][~small~][;][~recycles~[;] ~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~]); giveequipment(rand(eqlist)); var eq = self.equipment[self.equipment.length - 1]; var finalvals = []; for(i in eq.slots){ finalvals.push(runscript(~pirate/getpossibledice~[;] [i])); } if(eq.slots[0] == ~COUNTDOWN~){ eq.scriptbeforeexecute += ~if(e.getvar('redice').indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar('fury')){ inflictself('reequippolly'); }~; } else { eq.scriptbeforeexecute += ~ var ru = true; for(i in 0...e.slots.length){ if(actualdice[i].basevalue != e.getvar('redice')[i]) ru = false; } if(ru && !e.getvar('fury')) { inflictself('reequippolly'); }~; } if(eq.needsdoubles) finalvals[1] = finalvals[0]; eq.scriptiffury += ~e.setvar('fury'[;] true)~; eq.setvar(~redice~[;] finalvals); eq.setvar(~fury~[;] false); var nameadd = ~[recycle]~ + finalvals[0]; for(i in 1...finalvals.length){ nameadd += ~[;]~ + finalvals[i]; } eq.displayname = nameadd + ~ ~ + eq.displayname; sfx(~_thinghappens~);,,,,PINK,change_power,change_power,,,0,YES,NO,weakenavoid|excludefromrandomlists|curseavoid,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reinyarrrnation_upgraded,[90%]Every turn start[;] this turns|[90%]into an upgraded equipment[;]|[90%]which gets a random [recycle] value,1,var eqlist = getequipmentlist(null[;][~small~][;][~recycles~[;] ~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~]); giveequipment(rand(eqlist) + ~+~); var eq = self.equipment[self.equipment.length - 1]; var finalvals = []; for(i in eq.slots){ finalvals.push(runscript(~pirate/getpossibledice~[;] [i])); } if(eq.slots[0] == ~COUNTDOWN~){ eq.scriptbeforeexecute += ~if(e.getvar('redice').indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar('fury')){ inflictself('reequippolly'); }~; } else { eq.scriptbeforeexecute += ~ var ru = true; for(i in 0...e.slots.length){ if(actualdice[i].basevalue != e.getvar('redice')[i]) ru = false; } if(ru && !e.getvar('fury')) { inflictself('reequippolly'); }~; } if(eq.needsdoubles) finalvals[1] = finalvals[0]; eq.scriptiffury += ~e.setvar('fury'[;] true)~; eq.setvar(~redice~[;] finalvals); eq.setvar(~fury~[;] false); var nameadd = ~[recycle]~ + finalvals[0]; for(i in 1...finalvals.length){ nameadd += ~[;]~ + finalvals[i]; } eq.displayname = nameadd + ~ ~ + eq.displayname; sfx(~_thinghappens~);,,,,PINK,,,,,0,YES,NO,weakenavoid|excludefromrandomlists|curseavoid,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reinyarrrnation_downgraded,(Shouldn't appear[;] immune.),1,var eqlist = getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~]); giveequipment(rand(eqlist)); var eq = self.equipment[self.equipment.length - 1]; var finalvals = []; for(i in eq.slots){ finalvals.push(runscript(~pirate/getpossibledice~[;] [i])); } if(eq.slots[0] == ~COUNTDOWN~){ eq.scriptbeforeexecute += ~if(e.getvar('redice').indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar('fury')){ inflictself('reequippolly'); }~; } else { eq.scriptbeforeexecute += ~if(e.getvar('redice').indexOf(d) != -1 && !e.getvar('fury')) { inflictself('reequippolly'); }~; } eq.scriptiffury += ~e.setvar('fury'[;] true)~; eq.displayname += ~ [recycle]~ + finalvals[0]; eq.setvar(~redice~[;] finalvals); eq.setvar(~fury~[;] false); for(i in 1...finalvals.length){ eq.displayname += ~[;] ~ + finalvals[i]; } trace(eq.scriptbeforeexecute);,,,,GRAY,,change_power,,,0,YES,NO,weakenavoid|excludefromrandomlists,,,,,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,,
Daily Doubloons,At the start of each turn[;] |roll a dice that another |equipment needs to [recycle],2,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~redice~)); } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }  if(reusevals.length == 0) reusevals = [rand([1[;]2[;]3[;]4[;]5[;]6])]; givedice(rand(reusevals));,,,,YELLOW,reducesize,change_power,,,0,YES,NO,pirateonly|excludefromrandomlists|weakenavoid|curseavoid,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Hooked Roll_upgraded,Return a dice that another|equipment needs to [recycle]|[grey](Reuseable),1,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ if(eq.remainingcountdown > 0 && eq.remainingcountdown < 7){ reusevals.push(eq.remainingcountdown); } else{ if(eq.getvar(~redice~)[0] < 7){ reusevals = reusevals.concat(eq.getvar(~redice~)); } } } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }  if(reusevals.length == 0) reusevals = [1[;]2[;]3[;]4[;]5[;]6]; givedice(rand(reusevals));,,NORMAL,,GREEN,change_power,complicate,,,2,YES,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,,,e.setvar(~fury~[;] true);,
Daily Doubloons_downgraded,(Shouldn't appear.),2,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~) != 0) reusevals = reusevals.concat(eq.getvar(~redice~)); if(eq.getvar(~retdice~) != 0) reusevals = reusevals.concat(eq.getvar(~retdice~)); } }  if(reusevals == []) reusevals = [rand([1[;]2[;]3[;]4[;]5[;]6])]; givedice(rand(reusevals));,,,,WHITE,reducesize,change_power,,,0,YES,NO,pirateonly|excludefromrandomlists|weakenavoid,,,,,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,,
Keelhaul,Do [sword] damage of 1st dice[;]|reduce countdowns by 2nd[;]|[recycle] if this triggers equipment,2,attack(actualdice[0].basevalue); sfxdamage(actualdice[0].basevalue); boostcountdowns(actualdice[1].basevalue);,,NORMAL|NORMAL,7,PURPLE,change_power,change_power,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Landlubber's Hack,All of your equipment |can [recycle] on 1,1,,,,,BLUE,change_power,change_power,,,0,NO,NO,weakenavoid|excludefromrandomlists,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,inflictself(~recycleon1~);,,,,,,,
Landlubber's Hack_upgraded,All of your equipment |can [recycle] on 1 and 2,1,,,,,BLUE,change_power,,,,0,NO,NO,weakenavoid|excludefromrandomlists,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,inflictself(~recycleon1~); inflictself(~recycleon2~);,for(eq in self.equipment){ var arr = eq.getvar(~redice~); if(arr.length > 0){ if(arr.indexOf(1) == -1){ arr.push(1); } if(arr.indexOf(2) == -1){ arr.push(2); } eq.setvar(~redice~[;] arr); } else{ eq.setvar(~redice~[;] [1[;]2]); } },,,,,,
Landlubber's Hack_downgraded,(Shouldn't appear.),1,,,,,GRAY,change_power,,,,0,NO,NO,weakenavoid|excludefromrandomlists,,,e.getvar(~actuator~)._repeat = 0;,e.fulldescription = e.getvar(~ogdescription~);,for(eq in self.equipment){ var arr = eq.getvar(~redice~); if(arr.length > 0){ if(arr.indexOf(1) == -1){ arr.push(1); eq.setvar(~redice~[;] arr); } } else { eq.setvar(~redice~[;] [1]); } },for(eq in self.equipment){ var arr = eq.getvar(~redice~); if(arr.length > 0){ if(arr.indexOf(1) == -1){ arr.push(1); eq.setvar(~redice~[;] arr); } } else { eq.setvar(~redice~[;] [1]); } },,,,,,
Keelhaul_downgraded,Do [sword] damage of 1st dice[;]|reduce countdowns by 2nd[;]|[recycle] if this triggers equipment,2,attack(actualdice[0].basevalue); sfxdamage(actualdice[0].basevalue); boostcountdowns(actualdice[1].basevalue);,,NORMAL|NORMAL,5,PURPLE,add1,change_power,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Keelhaul_upgraded,Do [sword] damage of 1st dice[;]|reduce countdowns by 2nd[;]|[retrigger] if this triggers equipment,2,attack(actualdice[0].basevalue); sfxdamage(actualdice[0].basevalue); boostcountdowns(actualdice[1].basevalue);,,NORMAL|NORMAL,7,PURPLE,change_power,change_power,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~retriggerpolly~); },,e.setvar(~fury~[;] true);,
Pillage,Do [sword]1 damage[;] return|excess dice value on use|[grey] (Reuseable),1,attack(1); sfxdamage(1); if(e.getvar(~excess~) > 0){ givedice(e.getvar(~excess~)); e.setvar(~excess~[;] 0); },,COUNTDOWN,3,RED,change_power,removereusable,,,-1,NO,NO,,,,,e.setvar(~excess~[;] 0); e.setvar(~redice~[;] []);,,,if(e.dicehistory.length > 0){ if(e.dicehistory[e.dicehistory.length - 1].basevalue > e.remainingcountdown){ e.setvar(~excess~[;] e.dicehistory[e.dicehistory.length - 1].basevalue - e.remainingcountdown); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,if(e.getvar(~excess~) > 0){ givedice(e.getvar(~excess~)); e.setvar(~excess~[;] 0); }
Swab The Deck,Whenever you [recycle][][;] |reduce all countdowns by 1,1,boostcountdowns(1);,,,,GREEN,change_power,change_power,,,-1,YES,NO,triggersonreuse|cannotreuse|hidereuseable|curseavoid,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Swab The Deck_upgraded,Whenever you [recycle][][;] |reduce all countdowns by 2,1,boostcountdowns(2);,,,,GREEN,change_power,change_power,,,-1,YES,NO,triggersonreuse|cannotreuse|hidereuseable,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Swab The Deck_downgraded,Whenever you [recycle][][;] |50% chance to reduce|all countdowns by 1,1,if(chance(50)){ boostcountdowns(1); } else{ self.textparticle(~Nope!~); },,,,GREEN,change_power,change_power,,,-1,YES,NO,triggersonreuse|cannotreuse|hidereuseable,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Strengthen The Hull,Whenever you reduce a|countdown to 0[;]|gain [shield]1 shield,1,inflictself(~shield~[;] 1); sfx(~_shield~);,,,,ORANGE,change_power,change_power,,,-1,YES,NO,triggeroncountdownreduce|cannotreuse|hidereuseable|curseavoid,,,,,,if(self.lastequipmentused.maxcountdown > 0){ self.lastequipmentused = e; e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,e.preventdefault = true; e.maintainfury = true;,
Strengthen The Hull_downgraded,Whenever you reduce a|countdown to 0[;]|50% chance to gain [shield]1,1,inflictself(~shield~[;] 1); sfx(~_shield~);,,,,ORANGE,change_power,change_power,,,-1,YES,NO,triggeroncountdownreduce|cannotreuse|hidereuseable,,,,,,if(self.lastequipmentused.maxcountdown > 0){ if(rand([1[;]2]) == 1){ self.lastequipmentused = e; e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); } else{ e.animate(~flashandshake~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~Nope!~[;]~0xffffff~); } },,,,,e.preventdefault = true; e.maintainfury = true;,
Strengthen The Hull_upgraded,Whenever you reduce a|countdown to 0[;]|gain [shield]2 shield,1,inflictself(~shield~[;] 2); sfx(~_shield~);,,,,ORANGE,change_power,change_power,,,-1,YES,NO,triggeroncountdownreduce|cannotreuse|hidereuseable,,,,,,if(self.lastequipmentused.maxcountdown > 0){ self.lastequipmentused = e; e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,e.preventdefault = true; e.maintainfury = true;,
Anchor,Do [sword]<var:doublereusecount> damage[;] increases|by 2 for every [recycle] this turn,1,attack(self.getvar(~doublereusecount~)); sfxdamage(self.getvar(~doublereusecount~));,,ODD,,RED,simplify,change_power,,,0,NO,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~); e.setvar(~redice~[;] []);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Anchor_downgraded,Do [sword]<var:turnreusecount> damage[;] increases|by 1 for every [recycle] this turn,1,attack(self.getvar(~turnreusecount~)); sfxdamage(self.getvar(~turnreusecount~));,,ODD,,RED,simplify,change_power,,,0,NO,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~); e.setvar(~redice~[;] []);,,,,e.fulldescription = e.getvar(~ogdescription~);,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Treasure Trove,Holds a Golden Flintlock|inside its chest|[85%][grey]([sword]2x[slot][;] [recycle] on 6),1,giveequipment(~Golden Flintlock~[;]true[;]false); sfx(~_thinghappens~); for(eq in self.equipment){ if(eq.name == ~Golden Flintlock~){ if(self.hasstatus(~retriggerall~) # self.hasstatus(~maroonall~)){ eq.fulldescription = ~Do [sword]<double> damage[;][newline][retrigger] on 6~; } } },,COUNTDOWN,15,GRAY,threequartercountdown,,,,0,YES,YES,weakenavoid|excludefromrandomlists,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Golden Flintlock,Do [sword]<double> damage[;]|[recycle] on 6,1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,recycles,,,self.equipment.remove(e);,e.setvar(~redice~[;] [6]); e.fulldescription = ~Do [sword]<double> damage[;][newline][recycle] on 6~;,,,,,if(e.getvar(~redice~) == 0) e.setvar(~redice~[;] [6]); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Golden Flintlock_upgraded,Do [sword]<double> damage[;]|[recycle] on even,1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,YELLOW,change_power,,,,0,NO,NO,recycles,,,self.equipment.remove(e);,e.setvar(~redice~[;] [2[;] 4[;] 6]); e.fulldescription = ~Do [sword]<double> damage[;][newline][recycle] on even~;,,,,,if(e.getvar(~redice~) == 0) e.setvar(~redice~[;] [2[;] 4[;] 6]); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Golden Flintlock_downgraded,Do [sword]<d6> damage[;]|[recycle] on 6,1,attack(d); sfxdamage(d);,,NORMAL,,YELLOW,change_power,,,,0,NO,NO,recycles,,,self.equipment.remove(e);,e.setvar(~redice~[;] [6]);,,,,,if(e.getvar(~redice~) == 0) e.setvar(~redice~[;] [6]); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Walk The Plank,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken on [recycle][][;]|[recycle] on 4,2,attack(d[;] WEAKEN); sfxdamage(d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { sfx(~_weaken~); inflict(~weaken~[;] 1); },,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [4]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Man O War,Do [sword]<d6> damage[;]|do [sword]<double> and [recycle] instead|on doubles,2,if(actualdice[0].basevalue == actualdice[1].basevalue){ attack(d * 2); sfxdamage(d * 2); } else{ attack(d); sfxdamage(d); },,MAX3|MAX3,,PINK,increaserange,decreaserange,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; if(actualdice[0].basevalue == actualdice[1].basevalue){ reusechck = true; } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Capsize,Flip dice upside down[;]|randomize [recycle] on [recycle][][;]|[recycle] on 2,1,givedice(7 - d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { var opts = []; for(i in 2...7){ if(7 - d != i){ opts.push(i); } } e.setvar(~diceresult~[;] rand(opts)); e.setvar(~redice~[;] [e.getvar(~diceresult~)]); },,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,recycles,,e.setvar(~diceresult~[;] 2); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [e.getvar(~diceresult~)]); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Capsize_upgraded,Flip dice upside down[;]|randomize [recycle] on [recycle][][;]|[recycle] on 1,1,givedice(7 - d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { var opts = []; for(i in 1...7){ if(7 - d != i){ opts.push(i); } } e.setvar(~diceresult~[;] rand(opts)); e.setvar(~redice~[;] [e.getvar(~diceresult~)]); },,NORMAL,,GREEN,simplify,,,,0,YES,NO,recycles,,e.setvar(~diceresult~[;] 1); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [e.getvar(~diceresult~)]); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Capsize_downgraded,Flip dice upside down[;]|randomize [recycle] on [recycle][][;]|[recycle] on 3,1,givedice(7 - d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { var opts = []; for(i in 3...7){ if(7 - d != i){ opts.push(i); } } e.setvar(~diceresult~[;] rand(opts)); e.setvar(~redice~[;] [e.getvar(~diceresult~)]); },,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,recycles,,e.setvar(~diceresult~[;] 3); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [e.getvar(~diceresult~)]); e.fulldescription = ~Flip dice upside down[;][newline]randomize [recycle] on [recycle][][;][newline][recycle] on <evar:diceresult>~;,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Walk The Plank_upgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken on [recycle][][;]|[recycle] on 5,2,attack(d[;] WEAKEN); sfxdamage(d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { sfx(~_weaken~); inflict(~weaken~[;] 1); },,NORMAL,,ORANGE,,decreaserange,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [5]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Walk The Plank_downgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken on [recycle][][;]|[recycle] on 3,2,attack(d[;] WEAKEN); sfxdamage(d); if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { sfx(~_weaken~); inflict(~weaken~[;] 1); },,MAX4,,ORANGE,change_power,decreaserange,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [3]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Buried Treasure,Do [sword]5 damage[;]|recover [heal]3 health|(Needs 3 [recycle] to unlock),1,attack(5); attackself(-3); sfxdamage(5); sfx(~_heal~[;] 0.2);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.availablethisturn = false; e.unavailabletext = ~Buried Treasure~; e.unavailabledetails = [~Unavailable ([recycle]0 / 3)~]; e.setvar(~redice~[;] []); e.fulldescription = ~Do [sword]5 damage[;][newline]recover [heal]3 health~;,,e.unavailabledetails = [~Unavailable ([recycle]~ + self.getvar(~turnreusecount~) + ~ / 3)~]; if(self.getvar(~turnreusecount~) > 2 && !e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Unlocked! [recycle]~[;]~0x98ea40~); },,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Buried Treasure_upgraded,Do [sword]5 damage[;]|recover [heal]3 health|(Needs 2 [recycle] to unlock),1,attack(5); attackself(-3); sfxdamage(5); sfx(~_heal~[;] 0.2);,,NORMAL,,YELLOW,,,,,0,NO,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.availablethisturn = false; e.unavailabletext = ~Buried Treasure~; e.unavailabledetails = [~Unavailable ([recycle]0 / 2)~]; e.setvar(~redice~[;] []); e.fulldescription = ~Do [sword]5 damage[;][newline]recover [heal]3 health~;,,e.unavailabledetails = [~Unavailable ([recycle]~ + self.getvar(~turnreusecount~) + ~ / 2)~]; if(self.getvar(~turnreusecount~) > 1 && !e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Unlocked! [recycle]~[;]~0x98ea40~); },,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Buried Treasure_downgraded,Do [sword]5 damage[;]|recover [heal]3 health|(Needs 4 [recycle] to unlock),1,attack(5); attackself(-3); sfxdamage(5); sfx(~_heal~[;] 0.2);,,NORMAL,,YELLOW,,,,,0,NO,NO,pirateonly,,,e.fulldescription = e.getvar(~ogdescription~);,e.availablethisturn = false; e.unavailabletext = ~Buried Treasure~; e.unavailabledetails = [~Unavailable ([recycle]0 / 4)~]; e.setvar(~redice~[;] []); e.fulldescription = ~Do [sword]5 damage[;][newline]recover [heal]3 health~;,e.availablethisturn = false; e.unavailabletext = ~Buried Treasure~; e.unavailabledetails = [~Unavailable ([recycle]0 / 4)~]; e.setvar(~redice~[;] []); e.fulldescription = ~Do [sword]5 damage[;][newline]recover [heal]3 health~;,e.unavailabledetails = [~Unavailable ([recycle]~ + self.getvar(~turnreusecount~) + ~ / 4)~]; if(self.getvar(~turnreusecount~) > 3 && !e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Unlocked! [recycle]~[;]~0x98ea40~); },,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Marooned Chad,After using your limit break[;]|all your equipment can|[recycle][]/[retrigger] on any value,1,,,,,RED,,,,,0,NO,NO,cannotsteal|pirateonly|excludefromrandomlists|weakenavoid|permabuff|jesterequipment:bigbertha,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,e.setvar(~ogdescription~[;]~No effect[;] permanent buff[newline]has already triggered~);,,,,,,,,
Smeared Scallywag,Your limit break now rerolls|all your dice into ones that|can trigger a [recycle],1,,,,,GREEN,,,,,0,NO,NO,pirateonly|cannotsteal|excludefromrandomlists|weakenavoid|permabuff|jesterequipment:bigbertha,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,e.setvar(~ogdescription~[;]~No effect[;] permanent buff[newline]has already triggered~);,,,,,,,,
Raft Up,Combine dice[;]|[recycle] if this returns only 1 dice,1,givedice(d);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue) != -1){ reusechck = true; } } if((reusechck # d < 7) && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Raft Up_downgraded,Combine dice[;]|[recycle] if this returns only 1 dice,1,givedice(d);,,MIN3|MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,e.setvar(~redice~[;] [6]);,,,,e.fulldescription = e.getvar(~ogdescription~);,if((e.getvar(~redice~).indexOf(d) != -1 # d < 7) && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Raft Up_upgraded,Combine dice[;]|[retrigger] if this returns only 1 dice,1,givedice(d);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,e.setvar(~redice~[;] [6]);,,,,e.fulldescription = e.getvar(~ogdescription~);,if((e.getvar(~redice~).indexOf(d) != -1 # d < 7) && !e.getvar(~fury~)) { inflictself(~retriggerpolly~); },,e.setvar(~fury~[;] true);,
Safety Net,If you finish a turn without|a single [recycle][][;] roll 2 extra|dice at the next turn start,1,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);,,,,BLUE,change_power,change_power,,,0,YES,NO,weakenavoid,,e.setvar(~turncountlast~[;] 1);,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,if(e.getvar(~turncountlast~) == 0){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Triggered! [recycle]~[;]~0x98ea40~); sfx(~_thinghappens~); },,,e.setvar(~turncountlast~[;] self.getvar(~turnreusecount~));,,,e.preventdefault = true; e.maintainfury = true;,
Safety Net_downgraded,(Shouldn't show up.),2,,,,,GRAY,reducesize,change_power,,,0,NO,NO,weakenavoid,,e.setvar(~turncountlast~[;] 1);,,if(e.getvar(~turncountlast~) == 0){ givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); },,,,e.setvar(~turncountlast~[;] self.getvar(~turnreusecount~)); e.fulldescription = e.getvar(~ogdescription~);,,,e.preventdefault = true; e.maintainfury = true;,
Safety Net_upgraded,If you finish a turn without|a single [recycle][][;] roll 3 extra|dice at the next turn start,1,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);,,,,BLUE,change_power,change_power,,,0,YES,NO,weakenavoid,,e.setvar(~turncountlast~[;] 1);,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,if(e.getvar(~turncountlast~) == 0){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.animate(~flashandshake~); e.animation[e.animation.length - 1].addcommand(~textparticle~[;] ~[recycle] Triggered! [recycle]~[;]~0x98ea40~); sfx(~_thinghappens~); },,,e.setvar(~turncountlast~[;] self.getvar(~turnreusecount~));,,,e.preventdefault = true; e.maintainfury = true;,
Reel It In,At the start of your first|turn[;] trigger the effects of|your limit break for free,1,,,,,PINK,change_power,change_power,,,-1,YES,NO,hidereuseable|excludefromrandomlists|weakenavoid,,,,,if(turn == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,e.script = self.limitbreak.script;,,e.preventdefault = true; e.maintainfury = true;,
Reel It In_upgraded,At the start of your 1st/2nd|turn[;] trigger the effects of|your limit break for free,1,,,,,PINK,,,,,-1,YES,NO,hidereuseable|excludefromrandomlists|weakenavoid,,,,,if(turn == 1 # turn == 2){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,e.script = self.limitbreak.script;,,e.preventdefault = true; e.maintainfury = true;,
Reel It In_downgraded,(Shouldn't appear.),1,,,,,GRAY,change_power,change_power,,,-1,YES,NO,hidereuseable|excludefromrandomlists|weakenavoid,,,,,if(turn == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,e.script = self.limitbreak.script;,,e.preventdefault = true; e.maintainfury = true;,
Bottomless Barrel,Whenever you [recycle] without|using a 1[;] roll a 1,1,givedice(1);,,,,GREEN,change_power,change_power,,,-1,YES,NO,hidereuseable|excludefromrandomlists|cannotreuse|weakenavoid|curseavoid|pirateonly,,var s = new elements.DiceyScript(~ for(eq in self.equipment){ if(eq.scriptbeforeexecute.indexOf(\~botbarrelinjected\~) == -1){ if(eq.scriptbeforeexecute.indexOf(\~inflictself(\\\~reequippolly\\\~);\~) != -1){         var splitscript = eq.scriptbeforeexecute.split(\~inflictself(\\\~reequippolly\\\~);\~); var insertcode = \~ /*botbarrelinjected*/ var has1 = false; if(e.maxcountdown > 0){ if(e.dicehistory[e.dicehistory.length - 1].basevalue == 1){ has1 = true; } } else{ for(dice in actualdice){ if(dice.basevalue == 1){ has1 = true; } } } if(!has1){ for(eq in self.equipment){ if(eq.name == \\\~Bottomless Barrel\\\~){ eq.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); } } } } \~;  var newscript = splitscript[0]; for (i in 1...splitscript.length) {     newscript += \~inflictself(\\\~reequippolly\\\~);\~ + insertcode; } eq.scriptbeforeexecute = newscript; } } }~); var act = new motion.actuators.SimpleActuator(); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); s.set(~target~[;] target); act.move(); e.setvar(~act~[;] act);,e.fulldescription = e.getvar(~ogdescription~); e.getvar(~act~)._repeat = -1; e.resetvar(~act~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,,
Fickle Chain,Do [sword]<triple> damage on [recycle][][;]|does nothing without [recycle],1,if(e.getvar(~reused~)){ attack(d * 3); sfxdamage(d * 3); e.setvar(~reused~[;] false); } else{ sfx(~use_dodge_status_to_avoid~); },,MAX4,,RED,simplify,decreaserange,,,0,NO,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~reused~[;] false); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1) { if(!e.getvar(~fury~)){ inflictself(~reequippolly~); } e.setvar(~reused~[;] true); },,e.setvar(~fury~[;] true);,
Lucky Pull,For this turn[;] all your|equipment [recycle] on <d6>,1,inflictself(~recycleon~ + d); sfx(~_recycle~);,,MIN3,,GREEN,change_power,complicate,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Lucky Pull_upgraded,For this turn[;] all your|equipment [recycle] on <d6>[;]|return inserted dice,1,inflictself(~recycleon~ + d); sfx(~_recycle~); givedice([d]);,,MIN3,,GREEN,change_power,,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Clap of Thunder,At the start of each turn[;]|roll dice value equal to |[recycle] count last turn ([recycle]<var:turnreusecount>[]),1,if(self.hasstatus(~retriggerall~) # self.hasstatus(~maroonall~)){ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [retrigger] count[newline]last turn ([retrigger]<var:turnreusecount>[])~; } else{ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:turnreusecount>[])~; } if(self.getvar(~lastturncount~) > 0) givedice(self.getvar(~lastturncount~));,,,,YELLOW,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|curseavoid|weakenavoid,,,,if(turn != 1) e.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:lastturncount>[])~;,if(turn != 1) e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Clap of Thunder_upgraded,At the start of each turn[;]|roll dice value equal to |[recycle] count last turn ([recycle]<var:turnreusecount>[])[;]|and roll an extra 3,1,if(self.hasstatus(~retriggerall~) # self.hasstatus(~maroonall~)){ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [retrigger] count[newline]last turn ([retrigger]<var:turnreusecount>[])~; } else{ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:turnreusecount>[])~; } if(self.getvar(~lastturncount~) > 0) givedice(self.getvar(~lastturncount~)); givedice(3);,,,,YELLOW,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|curseavoid|weakenavoid,,,,if(turn != 1) e.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:lastturncount>[])~;,e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Clap of Thunder_downgraded,(Shouldn't appear.),1,if(self.hasstatus(~retriggerall~) # self.hasstatus(~maroonall~)){ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [retrigger] count[newline]last turn ([retrigger]<var:turnreusecount>[])~; } else{ e.sourceequipment.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:turnreusecount>[])~; } if(self.getvar(~lastturncount~) > 0) givedice(self.getvar(~lastturncount~));,,,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|curseavoid|weakenavoid,,,,if(turn != 1) e.fulldescription = ~At the start of each turn[;][newline]roll a dice equal to [recycle] count[newline]last turn ([recycle]<var:lastturncount>[])~;,if(turn != 1) e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false);,,,,,,e.preventdefault = true; e.maintainfury = true;,
Muzzleloading,Do [sword]1 damage[;] +1 on any|countdown reduce,1,attack(e.getvar(~damagecount~)); sfxdamage(e.getvar(~damagecount~));,,MIN3,,PURPLE,change_power,change_power,,,0,NO,NO,,,e.fulldescription = ~Do [sword]<evar:damagecount> damage[;] +1 whenever[newline]a countdown is reduced~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~damagecount~[;] 1);,,,e.setvar(~damagecount~[;] e.getvar(~damagecount~) + 1);,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Muzzleloading_upgraded,Do [sword]1 damage[;] +1 on any|countdown reduce,1,attack(e.getvar(~damagecount~)); sfxdamage(e.getvar(~damagecount~));,,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,e.fulldescription = ~Do [sword]<evar:damagecount> damage[;] +1 whenever[newline]a countdown is reduced~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~damagecount~[;] 1);,,,e.setvar(~damagecount~[;] e.getvar(~damagecount~) + 1);,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Muzzleloading_downgraded,Do [sword]1 damage[;] +1 on any|countdown reduce,1,attack(e.getvar(~damagecount~)); sfxdamage(e.getvar(~damagecount~));,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,e.fulldescription = ~Do [sword]<evar:damagecount> damage[;] +1 whenever[newline]a countdown is reduced~;,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~damagecount~[;] 1);,,,e.setvar(~damagecount~[;] e.getvar(~damagecount~) + 1);,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Bottomless Barrel_downgraded,(Shouldn't appear.),1,givedice(1);,,,,GRAY,change_power,change_power,,,-1,YES,NO,hidereuseable|excludefromrandomlists|cannotreuse|weakenavoid|curseavoid|pirateonly,,var s = new elements.DiceyScript(~ for(eq in self.equipment){ if(eq.scriptbeforeexecute.indexOf(\~botbarrelinjected\~) == -1){ if(eq.scriptbeforeexecute.indexOf(\~inflictself(\\\~reequippolly\\\~);\~) != -1){         var splitscript = eq.scriptbeforeexecute.split(\~inflictself(\\\~reequippolly\\\~);\~); var insertcode = \~ /*botbarrelinjected*/ var has1 = false; if(e.maxcountdown > 0){ if(e.dicehistory[e.dicehistory.length - 1].basevalue == 1){ has1 = true; } } else{ for(dice in actualdice){ if(dice.basevalue == 1){ has1 = true; } } } if(!has1){ for(eq in self.equipment){ if(eq.name == \\\~Bottomless Barrel\\\~){ eq.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); } } } } \~;  var newscript = splitscript[0]; for (i in 1...splitscript.length) {     newscript += \~inflictself(\\\~reequippolly\\\~);\~ + insertcode; } eq.scriptbeforeexecute = newscript; } } }~); var act = new motion.actuators.SimpleActuator(); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); s.set(~target~[;] target); act.move(); e.setvar(~act~[;] act);,e.fulldescription = e.getvar(~ogdescription~); e.getvar(~act~)._repeat = -1; e.resetvar(~act~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,,
Bottomless Barrel_upgraded,Whenever you [recycle] without|using a 2[;] roll a 2,1,givedice(2);,,,,GREEN,change_power,change_power,,,-1,YES,NO,hidereuseable|excludefromrandomlists|cannotreuse|weakenavoid|curseavoid|pirateonly,,var s = new elements.DiceyScript(~ for(eq in self.equipment){ if(eq.scriptbeforeexecute.indexOf(\~botbarrelinjected\~) == -1){ if(eq.scriptbeforeexecute.indexOf(\~inflictself(\\\~reequippolly\\\~);\~) != -1){         var splitscript = eq.scriptbeforeexecute.split(\~inflictself(\\\~reequippolly\\\~);\~); var insertcode = \~ /*botbarrelinjected*/ var has1 = false; if(e.maxcountdown > 0){ if(e.dicehistory[e.dicehistory.length - 1].basevalue == 2){ has1 = true; } } else{ for(dice in actualdice){ if(dice.basevalue == 2){ has1 = true; } } } if(!has1){ for(eq in self.equipment){ if(eq.name == \\\~Bottomless Barrel\\\~){ eq.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); } } } } \~;  var newscript = splitscript[0]; for (i in 1...splitscript.length) {     newscript += \~inflictself(\\\~reequippolly\\\~);\~ + insertcode; } eq.scriptbeforeexecute = newscript; } } }~); var act = new motion.actuators.SimpleActuator(); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); s.set(~target~[;] target); act.move(); e.setvar(~act~[;] act);,e.fulldescription = e.getvar(~ogdescription~); e.getvar(~act~)._repeat = -1; e.resetvar(~act~);,e.fulldescription = e.getvar(~ogdescription~);,,,,,,,,
Burst The Hull,Inflict [reuseblock]2 re-unusable[;]|do [sword]6 damage,2,inflict(~reuseblock~[;] 2); attack(6[;] WEAKEN); sfxdamage(6); sfx(~_weaken~);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,pirateenemyonly|excludefromrandomlists,,,,,,,,,,,,
Burst The Hull_upgraded,Inflict [reuseblock]2 re-unusable[;]|do [sword]9 damage,2,inflict(~reuseblock~[;] 2); attack(9[;] WEAKEN); sfxdamage(9); sfx(~_weaken~);,,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,pirateenemyonly|excludefromrandomlists,,,,,,,,,,,,
Burst The Hull_downgraded,Inflict [reuseblock]1 re-unusable[;]|do [sword]6 damage,2,inflict(~reuseblock~[;] 1); attack(6[;] WEAKEN); sfxdamage(6); sfx(~_weaken~);,,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,pirateenemyonly|excludefromrandomlists,,,,,,,,,,,,
Mystery Box@p,Very mysterious,1,,,,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,
Mystery Box@p_upgraded,Very mysterious,1,var eqlist = loadtext(~diceydungeons/mysterybox~); if(target.name == ~Pirate~){ eq.list.remove(~Sonic Wave~); eq.list.remove(~Shovel~); eq.list.remove(~Echo Blast~); } giveequipment(rand(eqlist) + ~+~[;] true);,,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Sea Shanty,Do [sword]<d6> damage[;]|inflict [reuseblock]1 re-unusable,2,attack(4[;] WEAKEN); sfxdamage(4); sfx(~_weaken~); inflict(~reuseblock~[;] 1); bonus(1000);,,MAX4,,ORANGE,increaserange,change_power,,,0,NO,NO,pirateenemyonly|excludefromrandomlists,,,,,,,,,,,,
Sea Shanty_downgraded,Do [sword]<d6> damage,2,attack(4[;] WEAKEN); sfxdamage(4); sfx(~_weaken~); bonus(1000);,,MAX4,,ORANGE,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Accordion,Do [sword]<d6> damage[;]|inflict [reuseblock]1 re-unusable,1,attack(d[;] WEAKEN); sfxdamage(d); sfx(~_weaken~); inflict(~reuseblock~[;] 1);,,MAX4,,ORANGE,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Accordion_downgraded,Inflict [reuseblock]1 re-unusable,1,sfx(~_weaken~); inflict(~reuseblock~[;] 1);,,MAX4,,ORANGE,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Pirate Hook@p,Do [sword]<d6> damage[;]|[recycle] on 4,2,attack(d); sfxdamage(d); if(d==4) bonus(1000);,Efficiency,NORMAL,,YELLOW,add1,change_power,reequipnext,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [4]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pirate Hook@p_upgraded,Do [sword]<d6> damage[;]|[recycle] on 5,2,attack(d); sfxdamage(d); if(d==5) bonus(1000);,Efficiency,NORMAL,,YELLOW,,,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [5]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pirate Hook@p_downgraded,Do [sword]<d6> damage[;]|[recycle] on 4,2,attack(d); sfxdamage(d); if(d==4) bonus(1000);,Efficiency,MAX4,,YELLOW,,,,,0,NO,NO,recycles,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] [4]); e.fulldescription = e.getvar(~ogdescription~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Pillage_upgraded,Drain [heart]1 health[;] return|excess dice value on use|[grey] (Reuseable),1,drain(1); sfx(~_drain~); if(e.getvar(~excess~) > 0){ givedice(e.getvar(~excess~)); e.setvar(~excess~[;] 0); },,COUNTDOWN,3,RED,,,,,-1,NO,NO,,,,,e.setvar(~excess~[;] 0); e.setvar(~redice~[;] []);,,,if(e.dicehistory.length > 0){ if(e.dicehistory[e.dicehistory.length - 1].basevalue > e.remainingcountdown){ e.setvar(~excess~[;] e.dicehistory[e.dicehistory.length - 1].basevalue - e.remainingcountdown); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,if(e.getvar(~excess~) > 0){ givedice(e.getvar(~excess~)); e.setvar(~excess~[;] 0); }
Hand,Combine 2 dice[;] can|return dice higher than 6,1,if(simulation){ bonus((d - 6) * 1000); } else{ givedice([d]); for(eq in self.equipment){ if(eq.name == ~Jimbo's Trick~){ eq.script += ~bonus(1000000000);~; } } } delay(1.0);,,NORMAL|NORMAL,,CYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Discard,Reroll a dice|(Reuseable),1,if(simulation){ if(d < 4) bonus(10000); if(d > 3) bonus(-100000000); } else{ givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); },,NORMAL,,RED,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Ante,Unlocks Jimbo's Trick|for the rest of the battle,2,giveequipment(~Jimbo's Trick~[;] true[;] false[;] e); sfx(~_thinghappens~); delay(1.0);,,COUNTDOWN,15,GRAY,twothirdcountdown,,,,0,YES,NO,excludefromrandomlists|weakenavoid,,,,,,,,,delay(1.0);,,,
Cash Out,Do [sword]<d6> damage,2,attack(d); sfxdamage(d);,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,,,,,,,,,
Jimbo's Trick,Return dice value x1.5[;] can|return dice higher than 6,2,givedice([d * 1.5]); sfx(~_xmult~); if(d < 7) bonus(-10000000000); else bonus(1000000000000000000);,,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,e.setvar(~ogscript~[;] e.script);,,,,,,e.script = ~givedice([d * 1.5]); sfx(\~_xmult\~); bonus(-100000); if(d < 7) bonus(-10000000000); ~;,delay(1.0);,,,
Discard_upgraded,Reroll a dice|(Reuseable),1,if(simulation){ if(d < 4) bonus(10000); if(d > 3) bonus(-100000000); } else{ givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); },,NORMAL,,RED,change_power,,,,3,YES,NO,,,,,,,,,,,,,
Discard_downgraded,Reroll a dice|(Reuseable),1,if(simulation){ if(d < 4) bonus(10000); if(d > 3) bonus(-100000000); } else{ givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); },,MIN3,,RED,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Jimbo's Trick_upgraded,Return dice value x2[;]|can return dice higher than 6,2,delay(1.0); givedice([d * 2]); if(d > 6){ bonus(100); } else{ bonus(-10); } sfx(~_xmult~);,,NORMAL,,RED,change_power,,,,0,YES,NO,,,,,,,,,,,,,
Jimbo's Trick_downgraded,Return dice value x1.25[;]|can return dice higher than 6,2,delay(1.0); givedice([d * 1.25]); if(d > 6){ bonus(100); } else{ bonus(-10); } sfx(~_xmult~);,,NORMAL,,RED,change_power,,,,0,YES,NO,,,,,,,,,,,,,
Hand_upgraded,Combine 3 dice[;] can|return dice higher than 6,1,if(simulation){ bonus((d - 6) * 1000); } else{ givedice([d]); },,NORMAL|NORMAL|NORMAL,,CYAN,change_power,,,,0,YES,NO,,,,,,,,,,,,,
Hand_downgraded,Dice value +1[;] can|return dice higher than 6,1,if(simulation){ bonus((d - 6) * 1000); } else{ givedice([d + 1]); },,NORMAL,,CYAN,change_power,,,,0,YES,NO,,,,,,,,,,,,,
Hack And Slash,Split dice into values that|can trigger a [recycle],2,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ if(eq.getvar(~redice~)[0] < 7){ reusevals = reusevals.concat(eq.getvar(~redice~)); } } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }   if(reusevals.length == 0) reusevals = [1[;]2[;]3[;]4[;]5[;]6]; var val = d; var finaldicearray = []; while(val > 0){ var possiblerolls = []; for(i in 0...reusevals.length){ if(reusevals[i] <= val){ possiblerolls.push(reusevals[i]); } } if(possiblerolls.length > 0){ var pickedval = rand(possiblerolls); finaldicearray.push(pickedval); val -= pickedval; } else { finaldicearray.push(val); val = 0; } }  givedice(finaldicearray);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Hack And Slash_upgraded,Split dice into values that|can trigger a [recycle],2,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ if(eq.getvar(~redice~)[0] < 7){ reusevals = reusevals.concat(eq.getvar(~redice~)); } } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }   if(reusevals.length == 0) reusevals = [1[;]2[;]3[;]4[;]5[;]6]; var val = d; var finaldicearray = []; while(val > 0){ var possiblerolls = []; for(i in 0...reusevals.length){ if(reusevals[i] <= val){ possiblerolls.push(reusevals[i]); } } if(possiblerolls.length > 0){ var pickedval = rand(possiblerolls); finaldicearray.push(pickedval); val -= pickedval; } else { finaldicearray.push(val); val = 0; } }  givedice(finaldicearray);,,NORMAL|NORMAL|NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Hack And Slash_downgraded,Split dice into values that|can trigger a [recycle],2,var reusevals = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0){ if(eq.getvar(~redice~)[0] < 7){ reusevals = reusevals.concat(eq.getvar(~redice~)); } } if(eq.getvar(~retdice~).length > 0){ reusevals = reusevals.concat(eq.getvar(~retdice~)); } } }   if(reusevals.length == 0) reusevals = [1[;]2[;]3[;]4[;]5[;]6]; var val = d; var finaldicearray = []; while(val > 0){ var possiblerolls = []; for(i in 0...reusevals.length){ if(reusevals[i] <= val){ possiblerolls.push(reusevals[i]); } } if(possiblerolls.length > 0){ var pickedval = rand(possiblerolls); finaldicearray.push(pickedval); val -= pickedval; } else { finaldicearray.push(val); val = 0; } }  givedice(finaldicearray);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.setvar(~redice~[;] []); e.fulldescription = e.getvar(~ogdescription~);,,,,,var reusechck = false; for(eq in self.equipment){ if(eq.slots[0] == ~COUNTDOWN~ && (eq.remainingcountdown - eq.reducecountdownby <= actualdice[1].basevalue)){ reusechck = true; } } for(dice in actualdice){ if(e.getvar(~redice~).indexOf(dice.basevalue + dice.modifier) != -1){ reusechck = true; } } if(reusechck && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Glowing Cutlass,Do [sword]<d6> damage[;] add [star]<d6>|to your limit break charge,1,attack(d); sfxdamage(d); if(self.limitmax - self.limitvalue <= d){ self.limitvalue = self.limitmax; } else{ self.limitvalue += d; },,MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,,,,,e.setvar(~redice~[;] []);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Spray And Pray,Trigger a random other|equipment with new dice |that triggers a [recycle],2,var reusequips = []; for(eq in self.equipment){ if(eq.ready){ if(eq.getvar(~redice~).length > 0 && eq.slots.length > 0 && eq != e && eq.remainingcountdown < 7){ reusequips.push(eq); } if(eq.getvar(~retdice~).length > 0 && eq.slots.length > 0 && eq != e && eq.remainingcountdown < 7){ reusequips.push(eq); } } } if(reusequips.length > 0){ var ce = rand(reusequips); var inserteddice = []; if(ce.slots.length > 1 && ce.getvar(~redice~).length >= ce.slots.length){ for(i in 0...ce.slots.length){ var mydice = new elements.Dice(); mydice.basevalue = ce.getvar(~redice~)[i]; self.dicepool.push(mydice); ce.assigndice(mydice[;] i); mydice.assigned = ce; mydice.canbedragged = false; } } else{ for(i in 0...ce.slots.length){ var mydice = new elements.Dice(); mydice.basevalue = rand(ce.getvar(~redice~)); self.dicepool.push(mydice); ce.assigndice(mydice[;] i); mydice.assigned = ce; mydice.canbedragged = false; } } ce.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); } else{ self.textparticle(~No valid equipment!~); },,COUNTDOWN,6,PINK,reducesize,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Scabbarded Stabber,Do <d6> damage[;] [recycle] on any|[grey][85%](unlocks on limit break),1,attack(d); sfxdamage(d);,,MAX5,,GREEN,simplify,complicate,,,0,NO,NO,unlockonlimit,,,e.fulldescription = ~Do <d6> damage[;] [recycle] on any[newline][grey][85%](unlocks on limit break)~;,e.availablethisturn = false; e.unavailabletext = ~Scabbarded Stabber~; e.unavailabledetails = [~Unavailable (needs limit break)~]; e.setvar(~redice~[;] []); e.fulldescription = ~Do <d6> damage[;] [recycle] on any~; e.changecolour(~green~);,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Patch Up,Convert up to [star]6 limit |break charge to [shield] shield,1,var shieldamt = 0; if(self.limitvalue > 6) shieldamt = 6; else shieldamt = self.limitvalue; if(shieldamt > 0){ inflictself(~shield~[;] shieldamt); self.limitvalue -= shieldamt; sfx(~_shield~); } else{ self.textparticle(~No charge!~); sfx(~use_dodge_status_to_avoid~); },,MAX3,,ORANGE,change_power,complicate,,,0,YES,NO,,,,,,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Patch Up_upgraded,Convert up to [star]6 limit |break charge to [shield]+1 shield,1,var shieldamt = 0; if(self.limitvalue > 6) shieldamt = 6; else shieldamt = self.limitvalue; inflictself(~shield~[;] shieldamt + 1); self.limitvalue -= shieldamt; sfx(~_shield~);,,MAX3,,ORANGE,change_power,,,,0,YES,NO,,,,,,,,,,if(e.getvar(~redice~).indexOf(d) != -1 && !e.getvar(~fury~)) { inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Reinforced Leg,Gain [shield]3 shield[;]|[recycle] on imperfect fill,1,inflictself(~shield~[;] 3); sfx(~_shield~);,,COUNTDOWN,5,ORANGE,change_power,change_power,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,var resultval = e.remainingcountdown - e.reducecountdownby; if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); },,if(e.dicehistory.length > 0){ var resultval = e.remainingcountdown - e.reducecountdownby - (e.dicehistory[e.dicehistory.length - 1].basevalue + e.dicehistory[e.dicehistory.length - 1].modifier); if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,,
Reinforced Leg_upgraded,Gain [shield]4 shield[;]|[recycle] on imperfect fill,1,inflictself(~shield~[;] 4); sfx(~_shield~);,,COUNTDOWN,5,ORANGE,,,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,var resultval = e.remainingcountdown - e.reducecountdownby; if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); },,if(e.dicehistory.length > 0){ var resultval = e.remainingcountdown - e.reducecountdownby - (e.dicehistory[e.dicehistory.length - 1].basevalue + e.dicehistory[e.dicehistory.length - 1].modifier); if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,,
Reinforced Leg_downgraded,Gain [shield]2 shield[;]|[recycle] on imperfect fill,1,inflictself(~shield~[;] 3); sfx(~_shield~);,,COUNTDOWN,5,ORANGE,,,,,0,YES,NO,,,,e.fulldescription = e.getvar(~ogdescription~);,e.fulldescription = e.getvar(~ogdescription~);,var resultval = e.remainingcountdown - e.reducecountdownby; if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); },,if(e.dicehistory.length > 0){ var resultval = e.remainingcountdown - e.reducecountdownby - (e.dicehistory[e.dicehistory.length - 1].basevalue + e.dicehistory[e.dicehistory.length - 1].modifier); if(resultval > 0){ var redicelist = []; for(i in 1...7){ if(i > resultval){ redicelist.push(i); } } e.setvar(~redice~[;] redicelist); } },,if(e.getvar(~redice~).indexOf(e.dicehistory[e.dicehistory.length - 1].basevalue) != -1 && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,,
Kebab,Do <d6> damage[;]|[recycle] on doubles,2,if(simulation){} else{ attack(d); sfxdamage(d); if(d == 8) bonus(100000); if(actualdice[0].basevalue + actualdice[0].modifier == actualdice[1].basevalue + actualdice[1].modifier) bonus(50000); },,MAX4|MAX4,,GREEN,increaserange,change_power,,,0,NO,NO,recycles,,,,e.setvar(~fury~[;]false);,,,,,if(actualdice[0].basevalue + actualdice[0].modifier == actualdice[1].basevalue + actualdice[1].modifier && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Kebab_downgraded,Do <d6> damage[;]|[recycle] on doubles,2,attack(d); sfxdamage(d); if(d == 6) bonus(100000); if(actualdice[0].basevalue + actualdice[0].modifier == actualdice[1].basevalue + actualdice[1].modifier) bonus(50000);,,MAX3|MAX3,,GREEN,increaserange,change_power,,,0,NO,NO,recycles,,,,e.setvar(~fury~[;]false);,,,,,if(actualdice[0].basevalue + actualdice[0].modifier == actualdice[1].basevalue + actualdice[1].modifier && !e.getvar(~fury~)){ inflictself(~reequippolly~); },,e.setvar(~fury~[;] true);,
Evade,Gain [dodge]1 dodge,2,inflictself(~dodge~); sfx(~_dodge~);,,COUNTDOWN,7,YELLOW,thirdcountdown,,,,0,YES,NO,weakenavoid,,,,,,,,,,,,
En Guarde,Roll two 4s,2,givedice([4[;]4]); bonus(100000000);,,COUNTDOWN,15,BRIGHTCYAN,twothirdcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
En Guarde_downgraded,Roll two 3s,2,givedice([3[;]3]);,,COUNTDOWN,15,BRIGHTCYAN,twothirdcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
