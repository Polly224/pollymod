Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Rng Manipulation,Get a jackpot[;] without|rolling any extra dice,2,self.roll_range += self.roll_target; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Rebet Blade,Do [sword]<d6> damage|on jackpot[;] return the dice,1,attack(d); if(self.roll_jackpot > 0){ givedice([d]); } sfxdamage(d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,if(self.roll_jackpot > 0){ givedice([d]); }
Errorsurance,Gain [shield]3 shield when you|trigger an error,1,inflictself(~shield~[;]3); sfx(~_shield~); e.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|robotonly|cannotsteal|triggeronerror|excludefromrandomlists,,,,e.setvar(~rollcheck~[;] 0);,e.setvar(~doshield~[;]1);,if(self.roll_error && e.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Parallel Dicemension,Dice value -1[;] on error[;]|roll a 10,1,if(self.roll_error){ givedice([10]); } else{ givedice([d - 1]); },,NORMAL,,GRAY,increaserange,complicate,,,0,YES,NO,errorimmune|excludefromrandomlists,,,,,,,,,,,,
Errorsurance_upgraded,Gain [shield]3 shield |and gain [thorns]2 thorns|when you trigger an Error,1,inflictself(~shield~[;]3); sfx(~_shield~); inflictself(~thorns~[;] 2); self.setvar(~doshield~[;]0);,,,,,,,,,0,YES,NO,errorimmune|cannotsteal|robotonly|excludefromrandomlists|triggeronerror,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Jacked Switch,Do [sword]<d6> damage[;] on| error[;] gain [shield]<d6> instead,1,if(self.roll_error){ inflictself(~shield~[;]d); sfx(~_shield~); } else{ attack(d); sfxdamage(d); },,NORMAL,,GRAY,add1,complicate,,,0,NO,NO,errorimmune|robotonly,,,,,,,,,if(self.roll_realtotal > self.roll_target){ e.castdirection = -1; } else{ e.castdirection = 1; },,,
Inhibited Blade,Do [sword]<double> damage|(Only available on jackpot),1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,if(self.roll_jackpot > 0){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
_upgraded,,1,,,,,,,,,,0,NO,NO,,,,,,,,,,,,,
Rebet Blade_upgraded,Do [sword]<d6> damage|on jackpot[;] bump the dice,1,attack(d); if(self.roll_jackpot > 0){ givedice([d + 1]); } sfxdamage(d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Rebet Blade_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Reroll,Reroll jackpot options,1,runscript(~jackpotofalltrades/rerolljackpot~); resetjackpot(self); sfx(~_leverpull~);,,COUNTDOWN,3,GREEN,reuseable,noeffect,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Errorsurance_weakened,Gain [shield]1 shield when you|trigger an Error,1,inflictself(~shield~[;]1); sfx(~_shield~); self.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|triggeronerror|cannotsteal|excludefromrandomlists|robotonly,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Empty Slot,Transform this into the first |jackpot skill when used,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~PURPLE~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName) > -1){ eq.castdirection = -1; } } }    sfx(~_thinghappens~);,,EVEN,,PURPLE,change_power,change_power,,,0,YES,YES,cannotsteal|robotonly|cannotreuse,,,,,,,,,,,,
Placeholder,If you're reading this[;] I|fucked up the code somehow.,1,,,COUNTDOWN,5,,,noeffect,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotonly,,,self.equipment.remove(e);,,,,,,,,,
Empty Slot_upgraded,Transform into first jackpot |skill[;] return dice,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~YELLOW~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName) > -1){ eq.castdirection = -1; } } }    sfx(~_thinghappens~); givedice(actualdice[0]);,,EVEN,,PURPLE,,,,,0,YES,YES,cannotsteal|robotonly,,,,,,,,,,,,
Empty Slot_weakened,Transform this into the first |jackpot skill when used,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~YELLOW~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName)){ eq.castdirection = -1; } } }    sfx(~_thinghappens~);,,EVEN|ODD,,PURPLE,,,,,0,YES,YES,cannotsteal|robotonly,,,,,,,,,,,,
Rebet Blade_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(d);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Rng Manipulation_weakened,Increase jackpot range by 2,2,self.roll_range += 2; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Double Down,Do [sword]3 damage when you|trigger a jackpot,1,attack(3); sfxdamage(3);,,,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists|cannotsteal,,,,,e.setvar(~doattack~[;]1); e.setvar(~triggered~[;] false);,if(self.roll_jackpot > 0 && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); e.setvar(~triggered~[;] true); },,,,,,
_weakened,,1,,,,,,,,,,0,NO,NO,,,,,,,,,,,,,
Double Down_downgraded,Do [sword]1 damage when you|trigger a Jackpot,1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,,,e.setvar(~rollcheck~[;] 0);,,e.setvar(~rollcheck~[;] 0);,e.setvar(~doattack~[;]1);,if(self.roll_jackpot > 0 && e.getvar(~doshield~) == 1) { attack(1); attacksfx(1); e.animate(~disappear~); e.setvar(~doattack~[;]0); },,,,,,
_downgraded,,1,,,,,,,,,,0,NO,NO,,,,,,,,,,,,,
Retuner,On error[;] replace this |with a random equipment,1,,,,,,change_power,change_power,,,0,NO,NO,cannotsteal|robotonly|triggeronerror|errorimmune,,,,,,if(self.roll_error && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~'); trace(self.equipment);~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); e.animate(~error~); e.ready = false; },,,,,,
Retuner_upgraded,On error[;] replace this |with a random equipment[;]|and set its slots to normal,1,,,,,,,,,,0,NO,NO,cannotsteal|robotonly|triggeronerror|errorimmune,,,,,,if(self.roll_error && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~'); trace(self.equipment);~; t.script =  ~var slots = []; for(i in 0...self.equipment[self.equipment.length - 2].slots.length){ slots.push('NORMAL'); } self.equipment[self.equipment.length - 2].changeslots(slots); self.equipment[self.equipment.length - 2].animate('slotschanged');~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Retuner_weakened,On error[;] replace this |with a random equipment[;]|and weaken it,1,,,,,,change_power,,,,0,NO,NO,cannotsteal|robotonly|triggeronerror|errorimmune,,,,,e.setvar(~doeffect~[;]1);,if(self.roll_error && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~');~; t.script = ~self.equipment[self.equipment.length - 2].downgrade();~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Double Down_upgraded,Do [sword]3 damage|and inflict [poison]2 poison|when you trigger a jackpot,1,attack(3); sfxdamage(3); inflict(~poison~[;] 2); sfx(~_poison~);,,,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists|cannotsteal,,,,,e.setvar(~doattack~[;]1);,if(self.roll_jackpot > 0 && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); },,,,,,
Double Down_weakened,Do [sword]1 damage when you|trigger a jackpot,1,attack(1); sfxdamage(1);,,,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists|cannotsteal,,,,,e.setvar(~doattack~[;]1);,if(self.roll_jackpot > 0 && e.getvar(~doattack~) == 1) { e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); e.remove(); e.setvar(~doattack~[;]0); },,,,,,
Rng Manipulation_downgraded,Increase Jackpot range by 2,2,self.roll_range += 2; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy,,,,,,,,,,,,
Inhibited Blade_upgraded,Do [sword]<triple> damage|(Only available on jackpot),1,attack(d * 3); sfxdamage(d * 3);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade+~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,if(self.roll_jackpot > 0){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
Inhibited Blade_weakened,Do [sword]<d6> damage|(Only available on jackpot),1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,if(self.roll_jackpot > 0){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } }  e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,,,,,
Pop Off,Gain [jackpotshard]1 jackpot shard every|time you use a jackpot skill|[75%][grey](Automatic Autoroll on 4),1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,cannotsteal|robotonly|popoff,,var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); var s = new elements.DiceyScript(~if (self.roll_jackpot > 0 && self.getskillcard().skills.length >= 3) {     for (i in 0...self.getskillcard().skills.length)     {         var s = self.getskillcard().skills[i];         if (s.script.indexOf('popoffinjected') == -1){      s.script += \~ /*popoffinjected*/ var amt = 0;for(eq in self.equipment){if(eq.hastag(\\\~popoff\\\~)){amt++;}}for(k in 0...amt){inflictself(\\\~jackpotshard\\\~[;] 1); sfx(\\\~_leverpull\\\~);}\~; } } }~); e.setvar(~s~[;] s); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); act.move();,,,e.setvar(~doaction~[;] true);,,,,,,,
Pop Off_weakened,Gain [jackpotshard]1 jackpot shard when|you trigger a jackpot|[75%][grey](Autoroll next turn on 4),1,,,,,YELLOW,,,,,0,NO,NO,robotonly|cannotsteal,,,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
Pop Off_upgraded,Gain [jackpotshard]1 jackpot shard every|time you use a jackpot skill|or trigger a jackpot|[75%][grey](Automatic Autoroll on 4),1,,,,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|cannotsteal|popoff,,var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); var s = new elements.DiceyScript(~if (self.roll_jackpot > 0 && self.getskillcard().skills.length >= 3) {     for (i in 0...self.getskillcard().skills.length)     {         var s = self.getskillcard().skills[i];         if (s.script.indexOf('popoffinjected') == -1){                s.script += \~ /*popoffinjected*/ var amt = 0;for(eq in self.equipment){if(eq.hastag(\\\~popoff\\\~)){amt++;}}for(k in 0...amt){inflictself(\\\~jackpotshard\\\~[;] 1); sfx(\\\~_leverpull\\\~);}\~;       } } }~); e.setvar(~s~[;] s); act.onRepeat(s.execute[;] [self[;] target]); act._repeat = -1; s.set(~act~[;] act); s.set(~self~[;] self); act.move();,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
Inhibited Blade_downgraded,Do [sword]<d6> damage|(Only available on jackpot),1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,e.availablethisturn = false; e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,if(self.roll_jackpot > 0){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } }  e.unavailabletext = ~Inhibited Blade-~; e.unavailabledetails = [~Unavailable (Needs jackpot)~];,,,,,,
Errorsurance_downgraded,Gain [shield]1 shield when you|trigger an Error,1,inflictself(~shield~[;]1); sfx(~_shield~); self.setvar(~doshield~[;]0);,,,,,change_power,change_power,,,0,YES,NO,errorimmune|triggeronerror|cannotsteal|excludefromrandomlists|robotonly,,,,,self.setvar(~doshield~[;]1);,if(self.roll_total == self.roll_target && self.roll_jackpot < 1 && self.getvar(~doshield~) == 1){ e.doequipmentaction(self[;] target[;] 1[;] [][;] 0[;] false[;] false[;] false); },,,,,,
Empty Slot_downgraded,Transform this into the first |jackpot skill when used,1,var PickedSkill = new elements.Skill(self.getvar(~currentjackpotskills~)[2]); giveequipment(~Placeholder~[;] true[;] true); var BackCastList = [~PC Fans~[;] ~Basil's Protection~[;] ~Cthulhu's Shield~[;] ~Ctrl + C~[;] ~Dead Ringer~[;] ~Double Roll~[;] ~Dragon's Roll~[;] ~Duplicate~[;] ~Fifths Roll~[;] ~Final Countdown~[;] ~Firey Roll~[;] ~Guarded Fling~[;] ~Icy Roll~[;] ~Jimbo's Trick~[;] ~Ka... Ching!~[;] ~Lifeblood~[;] ~Limit Break~[;] ~Lucky Roll~[;] ~Midnight Snake~[;] ~Nanomachines~[;] ~Perfect Spanner~[;] ~Persona~[;] ~Prickly Pear~[;] ~Reshuffle~[;] ~Ripper Mode~[;] ~Run It Back~[;] ~Salvaging~[;] ~Sandvich~[;] ~Slippery Shoes~[;] ~Stars And Time~[;] ~Stored Prize~[;] ~Suit Up~[;] ~The 50/50~[;] ~The 75/25~[;] ~Timebomb~]; for(eq in self.equipment){ if(eq.name == ~Placeholder~){ eq.displayname = PickedSkill.name; eq.fulldescription = PickedSkill.description; eq.script = PickedSkill.script; eq.changecolour(~YELLOW~); eq.temporary_thisturnonly = false; eq.namemodifier = ~~; var skillName = PickedSkill.name; if(skillName[skillName.length - 1] == ~+~){ skillName = skillName.substr(0[;] ChosenJackpotSkills[i].length - 1); } eq.castdirection = 1; if(BackCastList.indexOf(skillName)){ eq.castdirection = -1; } } }    sfx(~_thinghappens~);,,EVEN|ODD,,PURPLE,,,,,0,YES,YES,cannotsteal|robotonly,,,,,,,,,,,,
Trickle Charge,Gain [jackpotshard]1 jackpot shard|[75%][grey](Automatic Autoroll on 4)|(Reuseable),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,MAX2,,ORANGE,change_power,change_function,,,-1,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Trickle Charge_upgraded,Gain [jackpotshard]1 jackpot shard|[75%][grey](Automatic Autoroll on 4)|(Reuseable),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,MAX4,,ORANGE,change_power,,,,-1,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Bugfixing,Fix equipment errors|(Only available on error),1,for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ var posx = eq.x; var posy = eq.y; eq.resetfornewturn(); eq.x = posx; eq.y = posy; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~); } } sfx(~jackpot_rolldice~);,,COUNTDOWN,8,,change_power,change_power,,,0,YES,NO,errorimmune,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; } },,,,,,
Bugfixing_weakened,Fix 1st equipment's error|(Only available on error),1,var equips = []; for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ equips.push(eq); } } sfx(~jackpot_rolldice~); var eq = equips[0]; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~);,,COUNTDOWN,8,,twothirdcountdown,change_power,,,0,YES,NO,errorimmune,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_total == self.roll_target && self.roll_jackpot < 1){ if(!e.availablethisturn){ e.availablethisturn = true; } } e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Bugfixing_downgraded,Fix 1st equipment's error|(Only available on error),1,var equips = []; for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ equips.push(eq); } } sfx(~jackpot_rolldice~); var eq = equips[0]; eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~);,,COUNTDOWN,12,,twothirdcountdown,change_power,,,0,YES,NO,errorimmune,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_total == self.roll_target && self.roll_jackpot < 1){ if(!e.availablethisturn){ e.availablethisturn = true; } } e.unavailabletext = ~Bugfixing-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Hive Network,Do [sword]2 damage|[sword]+1 for every errored item,1,attack(2 + e.getvar(~errorcount~)); sfxdamage(2 + e.getvar(~errorcount~));,,ODD,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,e.setvar(~errorcount~[;] 0); e.setvar(~checkequips~[;] true); e.setvar(~displayerrorcount~[;] 2); e.fulldescription = ~Do [sword]~ + e.getvar(~displayerrorcount~) + ~ damage[newline][sword]+1 for every errored item~;,,if(self.roll_error && e.getvar(~checkequips~)){ for(eq in self.equipment){ if(eq.getvar(~triggered~) # (!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready)){ e.setvar(~errorcount~[;] e.getvar(~errorcount~) + 1); e.setvar(~displayerrorcount~[;] e.getvar(~errorcount~) + 2); e.fulldescription = ~Do [sword]~ + e.getvar(~displayerrorcount~) + ~ damage[newline][sword]+1 for every errored item~; } } e.setvar(~checkequips~[;] false); },,,,,,
Patched Blade,Do [sword]<double> damage|(Only available on error),1,attack(d * 2); sfxdamage(d * 2);,,NORMAL,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Patched Blade~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
Bugfixing_upgraded,Fix equipment errors|(Only available on error),1,for(eq in self.equipment){ if(!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready){ eq.ready = true; eq.show = true; eq.blackedout = false; eq.equipalpha = 1; eq.animate(~flash~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[dice] Bug fixed! [dice]~[;]~0xffffff~); } } sfx(~jackpot_rolldice~);,,COUNTDOWN,5,,change_power,change_power,,,0,YES,NO,errorimmune|weakenavoid,,,,e.availablethisturn = false; e.unavailabletext = ~Bugfixing+~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; } },,,,,,
Patched Blade_upgraded,Do [sword]<triple> damage|(Only available on error),1,attack(d * 3); sfxdamage(d * 3);,,NORMAL,,,,,,,0,NO,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Patched Blade+~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } },,,,,,
Patched Blade_weakened,Do [sword]<d6> damage|(Only available on error),1,attack(d); sfxdamage(d);,,NORMAL,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,e.availablethisturn = false; e.unavailabletext = ~Patched Blade-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,if(self.roll_error){ if(!e.availablethisturn){ e.availablethisturn = true; e.animate(~flashandshake~); } } e.unavailabletext = ~Patched Blade-~; e.unavailabledetails = [~Unavailable (Needs error)~];,,,,,,
Hive Network_upgraded,Do [sword]2 damage|[sword]+2 for every errored item,1,attack(2 + e.getvar(~errorcount~) * 2); sfxdamage(2 + e.getvar(~errorcount~) * 2);,,ODD,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,e.setvar(~errorcount~[;] 0); e.setvar(~checkequips~[;] true); e.setvar(~displayerrorcount~[;] 2); e.fulldescription = ~Do [sword]~ + e.getvar(~displayerrorcount~) + ~ damage[newline][sword]+2 for every errored item~;,,if(self.roll_error && e.getvar(~checkequips~)){ for(eq in self.equipment){ if(eq.getvar(~triggered~) # (!(eq.containsadicealready() # (eq.maxcountdown > 0 && eq.remainingcountdown == 0)) && !eq.ready)){ e.setvar(~errorcount~[;] e.getvar(~errorcount~) + 1); e.setvar(~displayerrorcount~[;] (e.getvar(~errorcount~) * 2) + 2); e.fulldescription = ~Do [sword]~ + e.getvar(~displayerrorcount~) + ~ damage[newline][sword]+2 for every errored item~; } } e.setvar(~checkequips~[;] false); },,,,,,
Hive Network_weakened,Do [sword]2 damage,1,attack(2); sfxdamage(2);,,ODD,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Hive Network_downgraded,Do [sword]2 damage,1,attack(2); sfxdamage(2);,,ODD,,,change_power,change_power,,,0,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Pop Off_downgraded,Gain [jackpotshard]1 jackpot shard when|you trigger a jackpot|[75%][grey](Autoroll next turn on 4),1,,,,,YELLOW,,,,,0,NO,NO,robotonly|cannotsteal,,,,,e.setvar(~doaction~[;] true);,if(self.roll_jackpot > 0 && e.getvar(~doaction~)){ inflictself(~jackpotshard~[;] 1); sfx(~_leverpull~); e.setvar(~doaction~[;] false); },,,,,,
BSOD,|When you trigger an error[;]|jackpot with 1 skill useable||[75%][grey]PERMANENT UPGRADE ON|[75%][grey]PICKUP[;] DOES NOTHING ELSE,1,,,,,,,,,,0,NO,NO,excludefromrandomlists|robotonly|cannotsteal|errorimmune,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,,,,,,,,,
Big Bertha,|Every jackpot skill has a 33%|chance to be [yellow]upgraded||[75%][grey]PERMANENT UPGRADE ON|[75%][grey]PICKUP[;] DOES NOTHING ELSE,1,,,,,YELLOW,,,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotonly|nojackpotcopy,,e.fulldescription = ~No effect[;] permanent buff[newline]has already triggered~;,,,,,,,,,,
Rng Manipulation_upgraded,Get a jackpot[;] without|rolling any extra dice,1,self.roll_range += self.roll_target; adjustrobotcounter(0);,,REQUIRE3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly|nojackpotcopy|weakenavoid,,,,,,,,,,,,
Trickle Charge_weakened,Gain [jackpotshard]1 jackpot shard|[75%][grey](Automatic Autoroll on 4),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,MAX2,,ORANGE,change_power,change_function,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
Retuner_downgraded,On error[;] replace this |with a random equipment[;]|and weaken it,1,,,,,,change_power,,,,0,NO,NO,cannotsteal|robotonly|triggeronerror|errorimmune,,,,,e.setvar(~doeffect~[;]1);,if(self.roll_error && e.ready){ var replaceEquip = rand(getequipmentlist(null[;][~small~][;][~skillcard~[;]~excludefromrandomlists~[;]~witchonly~[;]~onceperbattle~[;]~alternateversion~])); var s = new elements.Skill(~Against all odds_old~); var t = new elements.Skill(~Against all odds_old~); s.script = ~giveequipment('~ + replaceEquip + ~');~; t.script = ~self.equipment[self.equipment.length - 2].downgrade();~; var act = new motion.actuators.SimpleActuator(null[;]0.15[;]null); var act2 = new motion.actuators.SimpleActuator(null[;]1.3[;]null); act.onComplete(s.execute[;][self[;]target]); act.move(); act2.onComplete(t.execute[;][self[;]target]); act2.move(); e.animate(~error~); e.ready = false; },,,,,,
Bonus Slot,Get an extra jackpot skill to|choose from whenever|you hit a jackpot,1,,,,,PINK,change_power,,,,0,NO,NO,extrajackpotskill|weakenimmune|nojackpotcopy|excludefromrandomlists,,inflictself(~extrajackpotskill~[;] 1);,,,,,,,,,,
Bonus Slot_upgraded,Get 2 extra jackpot skills to|choose from whenever|you hit a jackpot,1,,,,,PINK,change_power,,,,0,NO,NO,extrajackpotskill|weakenimmune,,inflictself(~extrajackpotskill~[;] 2);,,,,,,,,,,
Salt In The Wound,Do [sword]<d6> damage[;] on|jackpot[;] [poison]<d6> instead,1,if(self.roll_jackpot){ inflict(~poison~[;]d); sfx(~_poison~); } else{ attack(d); sfxdamage(d); },,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,robotonly,,,,,,,,,,,,
Slimy Payload,Add [virus]3 virus,1,inflict(~virus~[;] 3); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Slimy Payload_upgraded,Add [virus]4 virus,1,inflict(~virus~[;] 4); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Slimy Payload_weakened,Add [virus]2 virus,1,inflict(~virus~[;] 2); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Safety Knife,Split a dice in two[;] on error[;]|bump resulting dice,1,var bump = 0; if(self.roll_error){ bump = 1; }  var numberarray = []; for(i in 1...d){ numberarray.push(i); } var firstdiceval = d - (rand(numberarray)); givedice([firstdiceval + bump[;] d - firstdiceval + bump]);,,MAX5,,,simplify,decreaserange,,,0,YES,NO,robotonly|errorimmune,,,,,,,,,,,,
Capitalize,Do [sword]<d6>[;] [sword]<double> instead|if enemy hit jackpot,2,var mult = 1; if(target.roll_jackpot){ mult = 2; }  attack(d * mult); sfxdamage(d * mult);,,MAX5,,YELLOW,change_power,decreaserange,,,0,NO,NO,excludefromrandomlists|cannotsteal|robotenemyonly,,,,,,,,,,,,
Capitalize_upgraded,Do [sword]<d6>[;] [sword]<triple> instead|if enemy hit jackpot,2,var mult = 1; if(target.roll_jackpot){ mult = 3; }  attack(d * mult); sfxdamage(d * mult);,,MAX5,,YELLOW,change_power,,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Exploit,Gain [shield]<d6>[;] [shield]<double> instead |if enemy triggered error,2,var mult = 1; if(target.roll_error){ mult = 2; } inflictself(~shield~[;] d * mult); sfx(~_shield~);,,MAX5,,,change_power,decreaserange,,,0,YES,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,if(target.roll_error){ e.script += ~bonus(10000);~; },,,,e.script = ~var mult = 1; if(target.roll_error){ mult = 2; } inflictself(\~shield\~[;] d * mult); sfx(\~_shield\~); ~,,,,
Exploit_upgraded,Gain [shield]<d6>[;] [shield]<triple> instead |if enemy triggered error,2,var mult = 1; if(target.roll_error){ mult = 3; } inflictself(~shield~[;] d * mult); sfx(~_shield~);,,MAX5,,,change_power,decreaserange,,,0,YES,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,if(target.roll_error){ e.script += ~bonus(10000);~; },,,,e.script = ~var mult = 1; if(target.roll_error){ mult = 3; } inflictself(\~shield\~[;] d * mult); sfx(\~_shield\~); ~,,,,
Copied Skill,This will turn into your 1st|jackpot skill at the start of|Copycat's turn,2,,,COUNTDOWN,4,BLACK,,,,,0,NO,NO,,,,,,,,,,,,,
Slimy Payload_downgraded,Add [virus]2 virus,1,inflict(~virus~[;] 2); sfx(~roboterror~);,,ODD,,GRAY,change_power,change_power,,,0,NO,NO,cannotsteal|excludefromrandomlists|robotenemyonly,,,,,,,,,,,,
Egg Basket,Combine dice into 1[;]|re-useable once on jackpot,1,givedice([d]);,,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,e.setvar(~reuse~[;] true);,,,,,if(self.roll_jackpot && e.getvar(~reuse~)) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); e.setvar(~reuse~[;] false); },,,
Egg Basket_upgraded,Combine dice into 1[;]|re-useable on jackpot,1,givedice([d]);,,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,if(self.roll_jackpot) { inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); },,,
Egg Basket_weakened,Combine dice into 1,1,givedice([d]);,,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Egg Basket_downgraded,Combine dice into 1,1,givedice([d]);,,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Trickle Charge_downgraded,Gain [jackpotshard]1 jackpot shard|[75%][grey](Automatic Autoroll on 4),1,inflictself(~jackpotshard~[;]1); sfx(~_leverpull~);,,MAX2,,ORANGE,change_power,change_function,,,0,YES,NO,robotonly|cannotsteal,,,,,,,,,,,,
