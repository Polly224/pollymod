ID,Character,Level,Episode Name,Description,Rules Description,Equipment,Layout,Skillcard,Limit,Weakened Limit,Dice,Health,Generator,Super Level 2,Super Level 3,Super Level 4,Super Level 5,Cutscene,Script: Define Level Up Rewards,Script: Start Game,Script: After Level Up,Script: Change Floor,Script: Before Start Turn,Script: On Start Turn,Script: End Turn,Script: Start Combat,Script: After Combat
diceydungeons_robot_1,Robot,1,Let's Go Gambling!,You probably shouldn't see this! Unless you're diving through files[;] of course.|If you are[;] hi! Hello!! Hiiii! Omg hi!! Hru!!! Hru doing!!!,Every turn[;] your jackpot abilities are randomized.|Also this shouldn't show up[;] either[;] I don't think?,Rebet Blade|Pea Shooter,EQUIPMENT,Robot Calculate,Bonus Payout,Lucky Shot,0,24,robot_normal,0,0,0,0,robot1,leveluprewards(2[;] ~CPU:2~); leveluprewards(3[;] ~~[;] [~Equipment:Inhibited Blade~[;]~Equipment:Jacked Switch~[;] ~Upgrade~]); leveluprewards(4[;] ~CPU:2~); leveluprewards(5[;] ~~[;] [~Equipment:Big Bertha~[;] ~Equipment:BSOD~]); leveluprewards(6[;] ~CPU:2~);,Rules.includerareenemies = false; Rules.altequipmentname = ~Permanent Buff~; var excludedenemies = getcolumn(loaddata(~diceydungeons/excludedenemies~)[;] ~robot1~); excludedenemies.push(~Copycat~); Rules.excludeenemies(excludedenemies); self.usecpuinsteadofdice = true; var lmao = new displayobjects.HaxegonSprite(0[;]0[;]~file of great importance (DO NOT TOUCH)~[;]0[;]0); var delayedcheck = new motion.actuators.SimpleActuator(null[;] 0.01[;] null); var s = new elements.Skill(~Against all odds_old~); s.script = ~Rules.rulescreen(\~skillsatlevel\~ + self.level); Rules.overworldbutton_name = \~Rollable Skills\~; Rules.overworldbutton_action = \~rulescreen\~;~; delayedcheck.onComplete(s.execute[;] [self[;]target]); delayedcheck.move();,var delayedcheck = new motion.actuators.SimpleActuator(null[;] 1[;] null); var s = new elements.Skill(~Against all odds_old~); s.script = ~ for(eq in getbackpackcontents())   {    if(eq.name == 'Big Bertha')   {     self.setvar('skillscanbeupgraded'[;] true);    }     if(eq.name == 'BSOD') { self.setvar('jackpotonerror'[;] true); } }   for(eq in self.equipment)  {   if(eq.name == 'Big Bertha')   {   self.setvar('skillscanbeupgraded'[;] true);  }   if(eq.name == 'BSOD') { self.setvar('jackpotonerror'[;] true); } }~; delayedcheck.onComplete(s.execute[;] [self[;]target]); delayedcheck.move(); Rules.rulescreen(~skillsatlevel~ + self.level); Rules.overworldbutton_name = ~Rollable Skills~; Rules.overworldbutton_action = ~rulescreen~;,self.setvar(~FloorNumber~[;]self.getvar(~FloorNumber~) + 1);,if(self.getskillcard().skills.length > 0){ self.getskillcard().skills = [self.getskillcard().skills[0]]; } runscript(~jackpotofalltrades/rerolljackpot~); /*Resetting skillcard stuffs[;] fixes Bonus Slot and BSOD.*/ self.getskillcard().height = 1080;,/*Code below fixes Limit Break*/ if(self.getvar(~unlimitcards~).length > 0){ var limitcards = self.getvar(~unlimitcards~); var limitcardslots = self.getvar(~unlimitslots~); for(i in 0...self.getvar(~unlimitcards~).length){ self.getvar(~unlimitcards~)[i].changeslots(self.getvar(~unlimitslots~)[i]); self.getvar(~unlimitcards~)[i].animate(~slotschanged~); } self.setvar(~unlimitcards~[;] []); self.setvar(~unlimitslots~[;] []); }    self.setvar(~dothelimitbreak~[;]0); self.setvar(~previousroundplayerhp~[;]self.getvar(~currentroundplayerhp~)); self.setvar(~previousroundenemyhp~[;]self.getvar(~currentroundenemyhp~)); self.setvar(~currentroundplayerhp~[;]self.hp); self.setvar(~currentroundenemyhp~[;]target.hp); if(turn == 1){ runscript(~jackpotofalltrades/illegaldice~); runscript(~jackpotofalltrades/checkforbonusslot~); },self.setvar(~firstturnpassed~[;]true);,self.setvar(~firstturnpassed~[;]false); self.setvar(~previousroundenemyhp~[;] 0); self.setvar(~previousroundplayerhp~[;] 0); /*BSOD CODE*/ if(self.getvar(~jackpotonerror~)){ runscript(~jackpotofalltrades/errorcheck~); inflictself(~bsodvisual~); } if(self.getvar(~skillscanbeupgraded~)){ inflictself(~bigberthavisual~); },self.changelimitbreak(~Bonus Payout~); /*Code below fixes Limit Break*/ if(self.getvar(~unlimitcards~).length > 0){ var limitcards = self.getvar(~unlimitcards~); var limitcardslots = self.getvar(~unlimitslots~); for(i in 0...self.getvar(~unlimitcards~).length){ self.getvar(~unlimitcards~)[i].changeslots(self.getvar(~unlimitslots~)[i]); self.getvar(~unlimitcards~)[i].animate(~slotschanged~); } self.setvar(~unlimitcards~[;] []); self.setvar(~unlimitslots~[;] []); }
pollymod_pirate_1,Pirate,1,Hook[;] Line and Sinker!,What be ye purposes for looking thru' me code[;] laddie?,Are ye lookin' for me treasure? Ye won't find it here! Yarharhar!!!,Pirate Hook@p,EQUIPMENT,Hooked Roll,Play Hooky,Hook,2,24,pirate_normal,0,0,0,0,,leveluprewards(2[;] ~Dice~); leveluprewards(3[;] ~~[;] [~Equipment:Anchor~[;] ~Equipment:Swab The Deck~]); leveluprewards(4[;] ~Dice~); leveluprewards(5[;] ~~[;] [~Equipment:Smeared Scallywag~[;] ~Equipment:Marooned Chad~[;] ~Equipment:Carouser~]); leveluprewards(6[;] ~Dice~);,Rules.excludeenemies([~Copycat~[;] ~Gardener~[;] ~Loud Bird~[;] ~Crystalina~[;] ~Drain Monster~]); /* Copycat doesn't work with re-use[;] re-unusable doesn't really work at level 1 so no Gardener[;] and fuck Loud Bird and Drain Monster. */ Rules.altequipmentname = ~Permanent Buff~; Rules.rulescreen(~piraterules~); Rules.overworldbutton_name = ~Info~; Rules.overworldbutton_action = ~rulescreen~;,var delayedcheck = new motion.actuators.SimpleActuator(null[;] 1[;] null); var s = new elements.Skill(~Against all odds_old~); s.script = ~ for(eq in getbackpackcontents()){   if(eq.name == 'Marooned Chad'){ self.setvar('maroonedchad'[;] true);}if(eq.name == 'Carouser'){self.setvar('sharpenedhook'[;] true);}      if(eq.name == 'Smeared Scallywag'){ self.setvar('smearedscallywag'[;] true);  }  }    for(eq in self.equipment){ if(eq.name == 'Marooned Chad'){ self.setvar('maroonedchad'[;] true);   } if(eq.name == 'Carouser'){self.setvar('sharpenedhook'[;] true);}   if(eq.name == 'Smeared Scallywag'){ self.setvar('smearedscallywag'[;] true); }  }if(self.getvar('sharpenedhook')){ self.replaceskillcard('Hooked Roll+'); } ~; delayedcheck.onComplete(s.execute[;] [self[;]target]); delayedcheck.move();,,/* MAYBE i'll figure this out again because i do like how it looks. i don't know how to implement it perfectly though without a lot of effort*/ /*(System to add the re-use values of any equipment to their name and remove it from their descriptions)*/ /* var delayedcheck = new motion.actuators.SimpleActuator(null[;] 0.01[;] null); var s = new elements.Skill(~Against all odds_old~); s.script = ~ for(eq in self.equipment){ if(eq.hastag('recycles')){ eq.setvar('fury'[;] false); eq.displayname = eq.name + ' [recycle]' + eq.getvar('redice')[0]; trace(eq.fulldescription); trace(eq.fulldescription.split('[newline]')); var newdesc = eq.fulldescription.split('[newline]'); newdesc.pop(); var newdesctext = ''; for(i in 0...newdesc.length){ if(i != 0) newdesctext += '[newline]'; newdesctext += newdesc[i]; } eq.fulldescription = newdesctext; } }~; delayedcheck.onComplete(s.execute[;] [self[;]target]); delayedcheck.move(); */ self.setvar(~lastturncount~[;] self.getvar(~turnreusecount~)); self.setvar(~turnreusecount~[;] 0); self.setvar(~doublereusecount~[;] 0); for(eq in self.equipment){ eq.setvar(~fury~[;] false); },for(eq in self.equipment){ if(eq.getvar(~redice~).length > 0){ eq.setvar(~ogredice~[;] eq.getvar(~redice~)); } } runscript(~jackpotofalltrades/illegaldice~[;] [self]);,,for(eq in self.equipment){ eq.setvar(~ogdescription~[;] eq.fulldescription); eq.setvar(~redice~[;] []); }   for(eq in target.equipment){ eq.setvar(~ogdescription~[;] eq.fulldescription); eq.setvar(~redice~[;] []); } if(self.getvar(~smearedscallywag~)){ self.changelimitbreak(~Smeared Roll~); } if(self.getvar(~maroonedchad~)){ self.changelimitbreak(~Maroon The Chad~); }inflictself(~limittracker~);,for(eq in self.equipment){ if(eq.getvar(~ogdescription~) != 0) eq.fulldescription = eq.getvar(~ogdescription~); eq.setvar(~redice~[;] []); } self.setvar(~lastturncount~[;] 0); self.setvar(~turnreusecount~[;] 0); self.setvar(~doublereusecount~[;] 0);
