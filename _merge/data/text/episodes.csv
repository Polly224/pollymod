ID,Character,Level,Episode Name,Description,Rules Description,Equipment,Layout,Skillcard,Limit,Weakened Limit,Dice,Health,Generator,Super Level 2,Super Level 3,Super Level 4,Super Level 5,Cutscene,Script: Define Level Up Rewards,Script: Start Game,Script: After Level Up,Script: Change Floor,Script: Before Start Turn,Script: On Start Turn,Script: End Turn,Script: Start Combat,Script: After Combat
diceydungeons_robot_1,Robot,1,Rise of the Randobot,Standard rules[;] except for your jackpot |being a bit different!,Every turn[;] your jackpot abilities are randomized.|Start with an [yellow]Rng Manipulation[].,Rng Manipulation|Rebet Blade|Trickle Charge,EQUIPMENT,Robot Calculate,Bonus Payout,Lucky Shot,0,24,robot_normal,0,0,0,0,robot1,leveluprewards(5[;] ~CPU:2~); leveluprewards(3[;] ~~[;] [~Equipment:Reroll~[;]~Equipment:Bugfixing~]); leveluprewards(4[;] ~CPU:2~); leveluprewards(2[;] ~~[;] [~Equipment:Big Bertha~[;] ~Equipment:BSOD~[;] ~Upgrade~]); leveluprewards(6[;] ~CPU:2~);,Rules.includerareenemies = false; Rules.excludeenemies(getcolumn(loaddata(~diceydungeons/excludedenemies~)[;] ~robot1~)); self.usecpuinsteadofdice = true; Rules.limitbreakcost = 6;  var lmao = new displayobjects.HaxegonSprite(0[;]0[;]~file of great importance (DO NOT TOUCH)~[;]0[;]0);,var delayedcheck = new motion.actuators.SimpleActuator(null[;] 1[;] null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  for(eq in getbackpackcontents()) {  if(eq.name == 'Big Bertha') {   self.setvar('skillscanbeupgraded'[;] true);   eq.remove();   }   } for(eq in self.equipment){ if(eq.name == 'Big Bertha') { self.setvar('skillscanbeupgraded'[;] true); self.equipment.remove(eq); } }~; delayedcheck.onComplete(s.execute[;] [self[;]target]); delayedcheck.move();,self.setvar(~FloorNumber~[;]self.getvar(~FloorNumber~) + 1);,runscript(~jackpotofalltrades/rerolljackpot~); /*Resetting skillcard stuffs[;] fixes Bonus Slot.*/ self.getskillcard().height = 1080;,/*Code below fixes Limit Break*/ if(self.getvar(~unlimitcards~).length > 0){ var limitcards = self.getvar(~unlimitcards~); var limitcardslots = self.getvar(~unlimitslots~); for(i in 0...self.getvar(~unlimitcards~).length){ self.getvar(~unlimitcards~)[i].changeslots(self.getvar(~unlimitslots~)[i]); self.getvar(~unlimitcards~)[i].animate(~slotschanged~); } self.setvar(~unlimitcards~[;] []); self.setvar(~unlimitslots~[;] []); }   self.setvar(~dothelimitbreak~[;]0); self.setvar(~previousroundplayerhp~[;]self.getvar(~currentroundplayerhp~)); self.setvar(~previousroundenemyhp~[;]self.getvar(~currentroundenemyhp~)); self.setvar(~currentroundplayerhp~[;]self.hp); self.setvar(~currentroundenemyhp~[;]target.hp);,self.setvar(~firstturnpassed~[;]true);,/*if(self.getvar(~dicefubny~) == 0){ inflictself(~Dice Big~); }*/ self.setvar(~firstturnpassed~[;]false); self.setvar(~previousroundenemyhp~[;] target.hp); self.setvar(~previousroundplayerhp~[;] 0); runscript(~jackpotofalltrades/illegaldice~); runscript(~jackpotofalltrades/checkforbonusslot~); trace(self.getvar(~skillscanbeupgraded~));,self.changelimitbreak(~Bonus Payout~); /*Code below fixes Limit Break*/ if(self.getvar(~unlimitcards~).length > 0){ var limitcards = self.getvar(~unlimitcards~); var limitcardslots = self.getvar(~unlimitslots~); for(i in 0...self.getvar(~unlimitcards~).length){ self.getvar(~unlimitcards~)[i].changeslots(self.getvar(~unlimitslots~)[i]); self.getvar(~unlimitcards~)[i].animate(~slotschanged~); } self.setvar(~unlimitcards~[;] []); self.setvar(~unlimitslots~[;] []); }
